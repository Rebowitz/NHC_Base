/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package com.nhcsys.dataaccess.jdbc;

import com.nhcsys.dataaccess.dao.*;
import com.nhcsys.dataaccess.factory.*;
import com.nhcsys.dataaccess.dto.*;
import com.nhcsys.dataaccess.exceptions.*;
import java.sql.Connection;
import java.util.Collection;
import org.apache.log4j.Logger;
import java.sql.PreparedStatement;
import java.sql.Statement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Time;
import java.util.List;
import java.util.Iterator;
import java.util.ArrayList;

public class WnqinfoDaoImpl extends AbstractDAO implements WnqinfoDao
{
	/** 
	 * The factory class for this DAO has two versions of the create() method - one that
takes no arguments and one that takes a Connection argument. If the Connection version
is chosen then the connection will be stored in this attribute and will be used by all
calls to this DAO, otherwise a new Connection will be allocated for each operation.
	 */
	protected java.sql.Connection userConn;

	protected static final Logger logger = Logger.getLogger( WnqinfoDaoImpl.class );

	/** 
	 * All finder methods in this class use this SELECT constant to build their queries
	 */
	protected final String SQL_SELECT = "SELECT WNQINFO_ID, NETWORKINFO_ID, PROVIDER, REMOTENAME, LOCALNAME, IPADDRESS, WNQCOMMENT, DISPLAYTYPE, WNQSCOPE, WNQTYPE, WNQUSAGE FROM " + getTableName() + "";

	/** 
	 * Finder methods will pass this value to the JDBC setMaxRows method
	 */
	private int maxRows;

	/** 
	 * SQL INSERT statement for this table
	 */
	protected final String SQL_INSERT = "INSERT INTO " + getTableName() + " ( WNQINFO_ID, NETWORKINFO_ID, PROVIDER, REMOTENAME, LOCALNAME, IPADDRESS, WNQCOMMENT, DISPLAYTYPE, WNQSCOPE, WNQTYPE, WNQUSAGE ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? )";

	/** 
	 * SQL UPDATE statement for this table
	 */
	protected final String SQL_UPDATE = "UPDATE " + getTableName() + " SET WNQINFO_ID = ?, NETWORKINFO_ID = ?, PROVIDER = ?, REMOTENAME = ?, LOCALNAME = ?, IPADDRESS = ?, WNQCOMMENT = ?, DISPLAYTYPE = ?, WNQSCOPE = ?, WNQTYPE = ?, WNQUSAGE = ? WHERE WNQINFO_ID = ?";

	/** 
	 * SQL DELETE statement for this table
	 */
	protected final String SQL_DELETE = "DELETE FROM " + getTableName() + " WHERE WNQINFO_ID = ?";

	/** 
	 * Index of column WNQINFO_ID
	 */
	protected static final int COLUMN_WNQINFO_ID = 1;

	/** 
	 * Index of column NETWORKINFO_ID
	 */
	protected static final int COLUMN_NETWORKINFO_ID = 2;

	/** 
	 * Index of column PROVIDER
	 */
	protected static final int COLUMN_PROVIDER = 3;

	/** 
	 * Index of column REMOTENAME
	 */
	protected static final int COLUMN_REMOTENAME = 4;

	/** 
	 * Index of column LOCALNAME
	 */
	protected static final int COLUMN_LOCALNAME = 5;

	/** 
	 * Index of column IPADDRESS
	 */
	protected static final int COLUMN_IPADDRESS = 6;

	/** 
	 * Index of column WNQCOMMENT
	 */
	protected static final int COLUMN_WNQCOMMENT = 7;

	/** 
	 * Index of column DISPLAYTYPE
	 */
	protected static final int COLUMN_DISPLAYTYPE = 8;

	/** 
	 * Index of column WNQSCOPE
	 */
	protected static final int COLUMN_WNQSCOPE = 9;

	/** 
	 * Index of column WNQTYPE
	 */
	protected static final int COLUMN_WNQTYPE = 10;

	/** 
	 * Index of column WNQUSAGE
	 */
	protected static final int COLUMN_WNQUSAGE = 11;

	/** 
	 * Number of columns
	 */
	protected static final int NUMBER_OF_COLUMNS = 11;

	/** 
	 * Index of primary-key column WNQINFO_ID
	 */
	protected static final int PK_COLUMN_WNQINFO_ID = 1;

	/** 
	 * Inserts a new row in the WNQINFO table.
	 */
	public WnqinfoPk insert(Wnqinfo dto) throws WnqinfoDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			stmt = conn.prepareStatement( "SELECT wnqinfo_id_seq.NEXTVAL FROM DUAL" );
			rs = stmt.executeQuery();
			if (rs.next()) {
				dto.setWnqinfoId( rs.getLong( 1 ) );
				rs.close();
				stmt.close();
			}
		
			StringBuffer sql = new StringBuffer();
			sql.append( "INSERT INTO " + getTableName() + " (" );
			int modifiedCount = 0;
			if (dto.isWnqinfoIdModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
				}
		
				sql.append( "WNQINFO_ID" );
				modifiedCount++;
			}
		
			if (dto.isNetworkinfoIdModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
				}
		
				sql.append( "NETWORKINFO_ID" );
				modifiedCount++;
			}
		
			if (dto.isProviderModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
				}
		
				sql.append( "PROVIDER" );
				modifiedCount++;
			}
		
			if (dto.isRemotenameModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
				}
		
				sql.append( "REMOTENAME" );
				modifiedCount++;
			}
		
			if (dto.isLocalnameModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
				}
		
				sql.append( "LOCALNAME" );
				modifiedCount++;
			}
		
			if (dto.isIpaddressModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
				}
		
				sql.append( "IPADDRESS" );
				modifiedCount++;
			}
		
			if (dto.isWnqcommentModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
				}
		
				sql.append( "WNQCOMMENT" );
				modifiedCount++;
			}
		
			if (dto.isDisplaytypeModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
				}
		
				sql.append( "DISPLAYTYPE" );
				modifiedCount++;
			}
		
			if (dto.isWnqscopeModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
				}
		
				sql.append( "WNQSCOPE" );
				modifiedCount++;
			}
		
			if (dto.isWnqtypeModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
				}
		
				sql.append( "WNQTYPE" );
				modifiedCount++;
			}
		
			if (dto.isWnqusageModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
				}
		
				sql.append( "WNQUSAGE" );
				modifiedCount++;
			}
		
			if (modifiedCount==0) {
				// nothing to insert
				throw new IllegalStateException( "Nothing to insert" );
			}
		
			sql.append( ") VALUES (" );
			for (int i=0; i<modifiedCount; i++ ) {
				if (i>0) {
					sql.append( "," );
				}
		
				sql.append( "?" );
			}
		
			sql.append( ")" );
			stmt = conn.prepareStatement( sql.toString() );
			int index = 1;
			if (dto.isWnqinfoIdModified()) {
				stmt.setLong( index++, dto.getWnqinfoId() );
			}
		
			if (dto.isNetworkinfoIdModified()) {
				stmt.setLong( index++, dto.getNetworkinfoId() );
			}
		
			if (dto.isProviderModified()) {
				stmt.setString( index++, dto.getProvider() );
			}
		
			if (dto.isRemotenameModified()) {
				stmt.setString( index++, dto.getRemotename() );
			}
		
			if (dto.isLocalnameModified()) {
				stmt.setString( index++, dto.getLocalname() );
			}
		
			if (dto.isIpaddressModified()) {
				stmt.setString( index++, dto.getIpaddress() );
			}
		
			if (dto.isWnqcommentModified()) {
				stmt.setString( index++, dto.getWnqcomment() );
			}
		
			if (dto.isDisplaytypeModified()) {
				stmt.setString( index++, dto.getDisplaytype() );
			}
		
			if (dto.isWnqscopeModified()) {
				stmt.setString( index++, dto.getWnqscope() );
			}
		
			if (dto.isWnqtypeModified()) {
				stmt.setString( index++, dto.getWnqtype() );
			}
		
			if (dto.isWnqusageModified()) {
				stmt.setString( index++, dto.getWnqusage() );
			}
		
			if (logger.isDebugEnabled()) {
				logger.debug( "Executing " + sql.toString() + " with values: " + dto);
			}
		
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			if (logger.isDebugEnabled()) {
				logger.debug( rows + " rows affected (" + (t2-t1) + " ms)");
			}
		
			return dto.createPk();
		}
		catch (Exception _e) {
			logger.error( "Exception: " + _e.getMessage(), _e );
			throw new WnqinfoDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Updates a single row in the WNQINFO table.
	 */
	public void update(WnqinfoPk pk, Wnqinfo dto) throws WnqinfoDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			StringBuffer sql = new StringBuffer();
			sql.append( "UPDATE " + getTableName() + " SET " );
			boolean modified = false;
			if (dto.isWnqinfoIdModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "WNQINFO_ID=?" );
				modified=true;
			}
		
			if (dto.isNetworkinfoIdModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "NETWORKINFO_ID=?" );
				modified=true;
			}
		
			if (dto.isProviderModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "PROVIDER=?" );
				modified=true;
			}
		
			if (dto.isRemotenameModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "REMOTENAME=?" );
				modified=true;
			}
		
			if (dto.isLocalnameModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "LOCALNAME=?" );
				modified=true;
			}
		
			if (dto.isIpaddressModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "IPADDRESS=?" );
				modified=true;
			}
		
			if (dto.isWnqcommentModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "WNQCOMMENT=?" );
				modified=true;
			}
		
			if (dto.isDisplaytypeModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "DISPLAYTYPE=?" );
				modified=true;
			}
		
			if (dto.isWnqscopeModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "WNQSCOPE=?" );
				modified=true;
			}
		
			if (dto.isWnqtypeModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "WNQTYPE=?" );
				modified=true;
			}
		
			if (dto.isWnqusageModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "WNQUSAGE=?" );
				modified=true;
			}
		
			if (!modified) {
				// nothing to update
				return;
			}
		
			sql.append( " WHERE WNQINFO_ID=?" );
			if (logger.isDebugEnabled()) {
				logger.debug( "Executing " + sql.toString() + " with values: " + dto);
			}
		
			stmt = conn.prepareStatement( sql.toString() );
			int index = 1;
			if (dto.isWnqinfoIdModified()) {
				stmt.setLong( index++, dto.getWnqinfoId() );
			}
		
			if (dto.isNetworkinfoIdModified()) {
				stmt.setLong( index++, dto.getNetworkinfoId() );
			}
		
			if (dto.isProviderModified()) {
				stmt.setString( index++, dto.getProvider() );
			}
		
			if (dto.isRemotenameModified()) {
				stmt.setString( index++, dto.getRemotename() );
			}
		
			if (dto.isLocalnameModified()) {
				stmt.setString( index++, dto.getLocalname() );
			}
		
			if (dto.isIpaddressModified()) {
				stmt.setString( index++, dto.getIpaddress() );
			}
		
			if (dto.isWnqcommentModified()) {
				stmt.setString( index++, dto.getWnqcomment() );
			}
		
			if (dto.isDisplaytypeModified()) {
				stmt.setString( index++, dto.getDisplaytype() );
			}
		
			if (dto.isWnqscopeModified()) {
				stmt.setString( index++, dto.getWnqscope() );
			}
		
			if (dto.isWnqtypeModified()) {
				stmt.setString( index++, dto.getWnqtype() );
			}
		
			if (dto.isWnqusageModified()) {
				stmt.setString( index++, dto.getWnqusage() );
			}
		
			stmt.setLong( index++, pk.getWnqinfoId() );
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			if (logger.isDebugEnabled()) {
				logger.debug( rows + " rows affected (" + (t2-t1) + " ms)");
			}
		
		}
		catch (Exception _e) {
			logger.error( "Exception: " + _e.getMessage(), _e );
			throw new WnqinfoDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Deletes a single row in the WNQINFO table.
	 */
	public void delete(WnqinfoPk pk) throws WnqinfoDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			if (logger.isDebugEnabled()) {
				logger.debug( "Executing " + SQL_DELETE + " with PK: " + pk);
			}
		
			stmt = conn.prepareStatement( SQL_DELETE );
			stmt.setLong( 1, pk.getWnqinfoId() );
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			if (logger.isDebugEnabled()) {
				logger.debug( rows + " rows affected (" + (t2-t1) + " ms)");
			}
		
		}
		catch (Exception _e) {
			logger.error( "Exception: " + _e.getMessage(), _e );
			throw new WnqinfoDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns the rows from the WNQINFO table that matches the specified primary-key value.
	 */
	public Wnqinfo findByPrimaryKey(WnqinfoPk pk) throws WnqinfoDaoException
	{
		return findByPrimaryKey( pk.getWnqinfoId() );
	}

	/** 
	 * Returns all rows from the WNQINFO table that match the criteria 'WNQINFO_ID = :wnqinfoId'.
	 */
	public Wnqinfo findByPrimaryKey(long wnqinfoId) throws WnqinfoDaoException
	{
		Wnqinfo ret[] = findByDynamicSelect( SQL_SELECT + " WHERE WNQINFO_ID = ?", new Object[] {  new Long(wnqinfoId) } );
		return ret.length==0 ? null : ret[0];
	}

	/** 
	 * Returns all rows from the WNQINFO table that match the criteria ''.
	 */
	public Wnqinfo[] findAll() throws WnqinfoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " ORDER BY WNQINFO_ID", null );
	}

	/** 
	 * Returns all rows from the WNQINFO table that match the criteria 'WNQINFO_ID = :wnqinfoId'.
	 */
	public Wnqinfo[] findWhereWnqinfoIdEquals(long wnqinfoId) throws WnqinfoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE WNQINFO_ID = ? ORDER BY WNQINFO_ID", new Object[] {  new Long(wnqinfoId) } );
	}

	/** 
	 * Returns all rows from the WNQINFO table that match the criteria 'NETWORKINFO_ID = :networkinfoId'.
	 */
	public Wnqinfo[] findWhereNetworkinfoIdEquals(long networkinfoId) throws WnqinfoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE NETWORKINFO_ID = ? ORDER BY NETWORKINFO_ID", new Object[] {  new Long(networkinfoId) } );
	}

	/** 
	 * Returns all rows from the WNQINFO table that match the criteria 'PROVIDER = :provider'.
	 */
	public Wnqinfo[] findWhereProviderEquals(String provider) throws WnqinfoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE PROVIDER = ? ORDER BY PROVIDER", new Object[] { provider } );
	}

	/** 
	 * Returns all rows from the WNQINFO table that match the criteria 'REMOTENAME = :remotename'.
	 */
	public Wnqinfo[] findWhereRemotenameEquals(String remotename) throws WnqinfoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE REMOTENAME = ? ORDER BY REMOTENAME", new Object[] { remotename } );
	}

	/** 
	 * Returns all rows from the WNQINFO table that match the criteria 'LOCALNAME = :localname'.
	 */
	public Wnqinfo[] findWhereLocalnameEquals(String localname) throws WnqinfoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE LOCALNAME = ? ORDER BY LOCALNAME", new Object[] { localname } );
	}

	/** 
	 * Returns all rows from the WNQINFO table that match the criteria 'IPADDRESS = :ipaddress'.
	 */
	public Wnqinfo[] findWhereIpaddressEquals(String ipaddress) throws WnqinfoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE IPADDRESS = ? ORDER BY IPADDRESS", new Object[] { ipaddress } );
	}

	/** 
	 * Returns all rows from the WNQINFO table that match the criteria 'WNQCOMMENT = :wnqcomment'.
	 */
	public Wnqinfo[] findWhereWnqcommentEquals(String wnqcomment) throws WnqinfoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE WNQCOMMENT = ? ORDER BY WNQCOMMENT", new Object[] { wnqcomment } );
	}

	/** 
	 * Returns all rows from the WNQINFO table that match the criteria 'DISPLAYTYPE = :displaytype'.
	 */
	public Wnqinfo[] findWhereDisplaytypeEquals(String displaytype) throws WnqinfoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE DISPLAYTYPE = ? ORDER BY DISPLAYTYPE", new Object[] { displaytype } );
	}

	/** 
	 * Returns all rows from the WNQINFO table that match the criteria 'WNQSCOPE = :wnqscope'.
	 */
	public Wnqinfo[] findWhereWnqscopeEquals(String wnqscope) throws WnqinfoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE WNQSCOPE = ? ORDER BY WNQSCOPE", new Object[] { wnqscope } );
	}

	/** 
	 * Returns all rows from the WNQINFO table that match the criteria 'WNQTYPE = :wnqtype'.
	 */
	public Wnqinfo[] findWhereWnqtypeEquals(String wnqtype) throws WnqinfoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE WNQTYPE = ? ORDER BY WNQTYPE", new Object[] { wnqtype } );
	}

	/** 
	 * Returns all rows from the WNQINFO table that match the criteria 'WNQUSAGE = :wnqusage'.
	 */
	public Wnqinfo[] findWhereWnqusageEquals(String wnqusage) throws WnqinfoDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE WNQUSAGE = ? ORDER BY WNQUSAGE", new Object[] { wnqusage } );
	}

	/**
	 * Method 'WnqinfoDaoImpl'
	 * 
	 */
	public WnqinfoDaoImpl()
	{
	}

	/**
	 * Method 'WnqinfoDaoImpl'
	 * 
	 * @param userConn
	 */
	public WnqinfoDaoImpl(final java.sql.Connection userConn)
	{
		this.userConn = userConn;
	}

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows)
	{
		this.maxRows = maxRows;
	}

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows()
	{
		return maxRows;
	}

	/**
	 * Method 'getTableName'
	 * 
	 * @return String
	 */
	public String getTableName()
	{
		return "WNQINFO";
	}

	/** 
	 * Fetches a single row from the result set
	 */
	protected Wnqinfo fetchSingleResult(ResultSet rs) throws SQLException
	{
		if (rs.next()) {
			Wnqinfo dto = new Wnqinfo();
			populateDto( dto, rs);
			return dto;
		} else {
			return null;
		}
		
	}

	/** 
	 * Fetches multiple rows from the result set
	 */
	protected Wnqinfo[] fetchMultiResults(ResultSet rs) throws SQLException
	{
		Collection resultList = new ArrayList();
		while (rs.next()) {
			Wnqinfo dto = new Wnqinfo();
			populateDto( dto, rs);
			resultList.add( dto );
		}
		
		Wnqinfo ret[] = new Wnqinfo[ resultList.size() ];
		resultList.toArray( ret );
		return ret;
	}

	/** 
	 * Populates a DTO with data from a ResultSet
	 */
	protected void populateDto(Wnqinfo dto, ResultSet rs) throws SQLException
	{
		dto.setWnqinfoId( rs.getLong( COLUMN_WNQINFO_ID ) );
		dto.setNetworkinfoId( rs.getLong( COLUMN_NETWORKINFO_ID ) );
		dto.setProvider( rs.getString( COLUMN_PROVIDER ) );
		dto.setRemotename( rs.getString( COLUMN_REMOTENAME ) );
		dto.setLocalname( rs.getString( COLUMN_LOCALNAME ) );
		dto.setIpaddress( rs.getString( COLUMN_IPADDRESS ) );
		dto.setWnqcomment( rs.getString( COLUMN_WNQCOMMENT ) );
		dto.setDisplaytype( rs.getString( COLUMN_DISPLAYTYPE ) );
		dto.setWnqscope( rs.getString( COLUMN_WNQSCOPE ) );
		dto.setWnqtype( rs.getString( COLUMN_WNQTYPE ) );
		dto.setWnqusage( rs.getString( COLUMN_WNQUSAGE ) );
	}

	/** 
	 * Returns all rows from the WNQINFO table that match the specified arbitrary SQL statement
	 */
	public Wnqinfo[] findByDynamicSelect(String sql, Object[] sqlParams) throws WnqinfoDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = sql;
		
		
			if (logger.isDebugEnabled()) {
				logger.debug( "Executing " + SQL);
			}
		
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			logger.error( "Exception: " + _e.getMessage(), _e );
			throw new WnqinfoDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns all rows from the WNQINFO table that match the specified arbitrary SQL statement
	 */
	public Wnqinfo[] findByDynamicWhere(String sql, Object[] sqlParams) throws WnqinfoDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = SQL_SELECT + " WHERE " + sql;
		
		
			if (logger.isDebugEnabled()) {
				logger.debug( "Executing " + SQL);
			}
		
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			logger.error( "Exception: " + _e.getMessage(), _e );
			throw new WnqinfoDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

}
