/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package com.nhcsys.dataaccess.j2ee.session;

import com.nhcsys.dataaccess.factory.*;
import com.nhcsys.dataaccess.dao.*;
import com.nhcsys.dataaccess.dto.*;
import com.nhcsys.dataaccess.exceptions.*;
import java.rmi.RemoteException;
import java.math.*;
import java.util.Date;
import javax.ejb.*;

public interface WmiqinfoSession extends EJBObject
{
	/** 
	 * Inserts a new row in the WMIQINFO table.
	 */
	public WmiqinfoPk insert(Wmiqinfo dto) throws WmiqinfoDaoException, RemoteException;

	/** 
	 * Updates a single row in the WMIQINFO table.
	 */
	public void update(WmiqinfoPk pk, Wmiqinfo dto) throws WmiqinfoDaoException, RemoteException;

	/** 
	 * Deletes a single row in the WMIQINFO table.
	 */
	public void delete(WmiqinfoPk pk) throws WmiqinfoDaoException, RemoteException;

	/** 
	 * Returns the rows from the WMIQINFO table that matches the specified primary-key value.
	 */
	public Wmiqinfo findByPrimaryKey(WmiqinfoPk pk) throws WmiqinfoDaoException, RemoteException;

	/**
	 * Method 'findByPrimaryKey'
	 * 
	 * @param wmiqinfoId
	 * @throws WmiqinfoDaoException
	 * @throws RemoteException
	 * @return Wmiqinfo
	 */
	public Wmiqinfo findByPrimaryKey(long wmiqinfoId) throws WmiqinfoDaoException, RemoteException;

	/**
	 * Method 'findAll'
	 * 
	 * @throws WmiqinfoDaoException
	 * @throws RemoteException
	 * @return Wmiqinfo[]
	 */
	public Wmiqinfo[] findAll() throws WmiqinfoDaoException, RemoteException;

	/**
	 * Method 'findWhereWmiqinfoIdEquals'
	 * 
	 * @param wmiqinfoId
	 * @throws WmiqinfoDaoException
	 * @throws RemoteException
	 * @return Wmiqinfo[]
	 */
	public Wmiqinfo[] findWhereWmiqinfoIdEquals(long wmiqinfoId) throws WmiqinfoDaoException, RemoteException;

	/**
	 * Method 'findWhereNetworkinfoIdEquals'
	 * 
	 * @param networkinfoId
	 * @throws WmiqinfoDaoException
	 * @throws RemoteException
	 * @return Wmiqinfo[]
	 */
	public Wmiqinfo[] findWhereNetworkinfoIdEquals(long networkinfoId) throws WmiqinfoDaoException, RemoteException;

	/**
	 * Method 'findWhereNameEquals'
	 * 
	 * @param name
	 * @throws WmiqinfoDaoException
	 * @throws RemoteException
	 * @return Wmiqinfo[]
	 */
	public Wmiqinfo[] findWhereNameEquals(String name) throws WmiqinfoDaoException, RemoteException;

	/**
	 * Method 'findWhereQueryEquals'
	 * 
	 * @param query
	 * @throws WmiqinfoDaoException
	 * @throws RemoteException
	 * @return Wmiqinfo[]
	 */
	public Wmiqinfo[] findWhereQueryEquals(String query) throws WmiqinfoDaoException, RemoteException;

	/**
	 * Method 'findWhereResultEquals'
	 * 
	 * @param result
	 * @throws WmiqinfoDaoException
	 * @throws RemoteException
	 * @return Wmiqinfo[]
	 */
	public Wmiqinfo[] findWhereResultEquals(String result) throws WmiqinfoDaoException, RemoteException;

	/**
	 * Method 'findByDynamicSelect'
	 * 
	 * @param sql
	 * @param arg
	 * @throws WmiqinfoDaoException
	 * @throws RemoteException
	 * @return Wmiqinfo[]
	 */
	public Wmiqinfo[] findByDynamicSelect(String sql, Object[] arg) throws WmiqinfoDaoException, RemoteException;

	/**
	 * Method 'findByDynamicWhere'
	 * 
	 * @param sql
	 * @param arg
	 * @throws WmiqinfoDaoException
	 * @throws RemoteException
	 * @return Wmiqinfo[]
	 */
	public Wmiqinfo[] findByDynamicWhere(String sql, Object[] arg) throws WmiqinfoDaoException, RemoteException;

}
