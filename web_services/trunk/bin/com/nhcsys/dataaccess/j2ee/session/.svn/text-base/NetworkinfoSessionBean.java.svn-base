/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package com.nhcsys.dataaccess.j2ee.session;

import com.nhcsys.dataaccess.factory.*;
import com.nhcsys.dataaccess.dao.*;
import com.nhcsys.dataaccess.dto.*;
import com.nhcsys.dataaccess.exceptions.*;
import java.rmi.RemoteException;
import java.math.*;
import java.util.Date;
import javax.ejb.*;
import org.apache.log4j.Logger;

public class NetworkinfoSessionBean implements SessionBean
{
	private NetworkinfoDao daoImpl = createDao();

	protected static final Logger logger = Logger.getLogger( NetworkinfoSessionBean.class );

	/** 
	 * Inserts a new row in the NETWORKINFO table.
	 */
	public NetworkinfoPk insert(Networkinfo dto) throws NetworkinfoDaoException
	{
		try {
			return daoImpl.insert(dto);
		}
		catch (NetworkinfoDaoException daoException) {
			throw daoException;
		}
		catch (Exception ex) {
			logger.error( ex);
			throw new NetworkinfoDaoException( ex.getMessage() );
		}
		
	}

	/** 
	 * Updates a single row in the NETWORKINFO table.
	 */
	public void update(NetworkinfoPk pk, Networkinfo dto) throws NetworkinfoDaoException
	{
		try {
			daoImpl.update(pk, dto);
		}
		catch (NetworkinfoDaoException daoException) {
			throw daoException;
		}
		catch (Exception ex) {
			logger.error( ex);
			throw new NetworkinfoDaoException( ex.getMessage() );
		}
		
	}

	/** 
	 * Deletes a single row in the NETWORKINFO table.
	 */
	public void delete(NetworkinfoPk pk) throws NetworkinfoDaoException
	{
		try {
			daoImpl.delete(pk);
		}
		catch (NetworkinfoDaoException daoException) {
			throw daoException;
		}
		catch (Exception ex) {
			logger.error( ex);
			throw new NetworkinfoDaoException( ex.getMessage() );
		}
		
	}

	/** 
	 * Returns the rows from the NETWORKINFO table that matches the specified primary-key value.
	 */
	public Networkinfo findByPrimaryKey(NetworkinfoPk pk) throws NetworkinfoDaoException
	{
		return findByPrimaryKey( pk.getNetworkinfoId() );
	}

	/**
	 * Method 'findByPrimaryKey'
	 * 
	 * @param networkinfoId
	 * @throws NetworkinfoDaoException
	 * @return Networkinfo
	 */
	public Networkinfo findByPrimaryKey(long networkinfoId) throws NetworkinfoDaoException
	{
		try {
			return daoImpl.findByPrimaryKey(networkinfoId);
		}
		catch (NetworkinfoDaoException daoException) {
			throw daoException;
		}
		catch (Exception ex) {
			logger.error( ex);
			throw new NetworkinfoDaoException( ex.getMessage() );
		}
		
	}

	/**
	 * Method 'findAll'
	 * 
	 * @throws NetworkinfoDaoException
	 * @return Networkinfo[]
	 */
	public Networkinfo[] findAll() throws NetworkinfoDaoException
	{
		try {
			return daoImpl.findAll();
		}
		catch (NetworkinfoDaoException daoException) {
			throw daoException;
		}
		catch (Exception ex) {
			logger.error( ex);
			throw new NetworkinfoDaoException( ex.getMessage() );
		}
		
	}

	/**
	 * Method 'findWhereNetworkinfoIdEquals'
	 * 
	 * @param networkinfoId
	 * @throws NetworkinfoDaoException
	 * @return Networkinfo[]
	 */
	public Networkinfo[] findWhereNetworkinfoIdEquals(long networkinfoId) throws NetworkinfoDaoException
	{
		try {
			return daoImpl.findWhereNetworkinfoIdEquals(networkinfoId);
		}
		catch (NetworkinfoDaoException daoException) {
			throw daoException;
		}
		catch (Exception ex) {
			logger.error( ex);
			throw new NetworkinfoDaoException( ex.getMessage() );
		}
		
	}

	/**
	 * Method 'findWhereCustomerIdEquals'
	 * 
	 * @param customerId
	 * @throws NetworkinfoDaoException
	 * @return Networkinfo[]
	 */
	public Networkinfo[] findWhereCustomerIdEquals(long customerId) throws NetworkinfoDaoException
	{
		try {
			return daoImpl.findWhereCustomerIdEquals(customerId);
		}
		catch (NetworkinfoDaoException daoException) {
			throw daoException;
		}
		catch (Exception ex) {
			logger.error( ex);
			throw new NetworkinfoDaoException( ex.getMessage() );
		}
		
	}

	/**
	 * Method 'findWhereMachineIdEquals'
	 * 
	 * @param machineId
	 * @throws NetworkinfoDaoException
	 * @return Networkinfo[]
	 */
	public Networkinfo[] findWhereMachineIdEquals(long machineId) throws NetworkinfoDaoException
	{
		try {
			return daoImpl.findWhereMachineIdEquals(machineId);
		}
		catch (NetworkinfoDaoException daoException) {
			throw daoException;
		}
		catch (Exception ex) {
			logger.error( ex);
			throw new NetworkinfoDaoException( ex.getMessage() );
		}
		
	}

	/**
	 * Method 'findWhereSsidEquals'
	 * 
	 * @param ssid
	 * @throws NetworkinfoDaoException
	 * @return Networkinfo[]
	 */
	public Networkinfo[] findWhereSsidEquals(String ssid) throws NetworkinfoDaoException
	{
		try {
			return daoImpl.findWhereSsidEquals(ssid);
		}
		catch (NetworkinfoDaoException daoException) {
			throw daoException;
		}
		catch (Exception ex) {
			logger.error( ex);
			throw new NetworkinfoDaoException( ex.getMessage() );
		}
		
	}

	/**
	 * Method 'findWherePassphraseEquals'
	 * 
	 * @param passphrase
	 * @throws NetworkinfoDaoException
	 * @return Networkinfo[]
	 */
	public Networkinfo[] findWherePassphraseEquals(String passphrase) throws NetworkinfoDaoException
	{
		try {
			return daoImpl.findWherePassphraseEquals(passphrase);
		}
		catch (NetworkinfoDaoException daoException) {
			throw daoException;
		}
		catch (Exception ex) {
			logger.error( ex);
			throw new NetworkinfoDaoException( ex.getMessage() );
		}
		
	}

	/**
	 * Method 'findWhereWirelessinfotypeEquals'
	 * 
	 * @param wirelessinfotype
	 * @throws NetworkinfoDaoException
	 * @return Networkinfo[]
	 */
	public Networkinfo[] findWhereWirelessinfotypeEquals(String wirelessinfotype) throws NetworkinfoDaoException
	{
		try {
			return daoImpl.findWhereWirelessinfotypeEquals(wirelessinfotype);
		}
		catch (NetworkinfoDaoException daoException) {
			throw daoException;
		}
		catch (Exception ex) {
			logger.error( ex);
			throw new NetworkinfoDaoException( ex.getMessage() );
		}
		
	}

	/**
	 * Method 'findWhereTimestampEquals'
	 * 
	 * @param timestamp
	 * @throws NetworkinfoDaoException
	 * @return Networkinfo[]
	 */
	public Networkinfo[] findWhereTimestampEquals(Date timestamp) throws NetworkinfoDaoException
	{
		try {
			return daoImpl.findWhereTimestampEquals(timestamp);
		}
		catch (NetworkinfoDaoException daoException) {
			throw daoException;
		}
		catch (Exception ex) {
			logger.error( ex);
			throw new NetworkinfoDaoException( ex.getMessage() );
		}
		
	}

	/**
	 * Method 'findByDynamicSelect'
	 * 
	 * @param sql
	 * @param arg
	 * @throws NetworkinfoDaoException
	 * @return Networkinfo[]
	 */
	public Networkinfo[] findByDynamicSelect(String sql, Object[] arg) throws NetworkinfoDaoException
	{
		try {
			return daoImpl.findByDynamicSelect(sql, arg);
		}
		catch (NetworkinfoDaoException daoException) {
			throw daoException;
		}
		catch (Exception ex) {
			logger.error( ex);
			throw new NetworkinfoDaoException( ex.getMessage() );
		}
		
	}

	/**
	 * Method 'findByDynamicWhere'
	 * 
	 * @param sql
	 * @param arg
	 * @throws NetworkinfoDaoException
	 * @return Networkinfo[]
	 */
	public Networkinfo[] findByDynamicWhere(String sql, Object[] arg) throws NetworkinfoDaoException
	{
		try {
			return daoImpl.findByDynamicWhere(sql, arg);
		}
		catch (NetworkinfoDaoException daoException) {
			throw daoException;
		}
		catch (Exception ex) {
			logger.error( ex);
			throw new NetworkinfoDaoException( ex.getMessage() );
		}
		
	}

	/**
	 * Method 'ejbActivate'
	 * 
	 */
	public void ejbActivate()
	{
	}

	/**
	 * Method 'ejbPassivate'
	 * 
	 */
	public void ejbPassivate()
	{
	}

	/**
	 * Method 'ejbCreate'
	 * 
	 */
	public void ejbCreate()
	{
	}

	/**
	 * Method 'ejbRemove'
	 * 
	 */
	public void ejbRemove()
	{
	}

	/**
	 * Method 'setSessionContext'
	 * 
	 * @param ctx
	 */
	public void setSessionContext(SessionContext ctx)
	{
	}

	/**
	 * Method 'unsetSessionContext'
	 * 
	 */
	public void unsetSessionContext()
	{
	}

	/**
	 * Method 'createDao'
	 * 
	 * @return NetworkinfoDao
	 */
	private NetworkinfoDao createDao()
	{
		return NetworkinfoDaoFactory.create();
	}

}
