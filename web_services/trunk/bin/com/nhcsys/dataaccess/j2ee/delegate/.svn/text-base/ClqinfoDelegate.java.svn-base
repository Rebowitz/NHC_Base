/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package com.nhcsys.dataaccess.j2ee.delegate;

import com.nhcsys.dataaccess.dao.*;
import com.nhcsys.dataaccess.dto.*;
import com.nhcsys.dataaccess.exceptions.*;
import com.nhcsys.dataaccess.j2ee.session.*;
import java.rmi.RemoteException;
import java.math.*;
import java.util.Date;
import javax.ejb.*;
import org.apache.log4j.Logger;

public class ClqinfoDelegate implements ClqinfoDao
{
	private ClqinfoSession session;

	protected static final Logger logger = Logger.getLogger( ClqinfoDelegate.class );

	private int maxRows;

	/**
	 * Method 'ClqinfoDelegate'
	 * 
	 * @param session
	 */
	public ClqinfoDelegate(final ClqinfoSession session)
	{
		this.session = session;
	}

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows)
	{
		this.maxRows = maxRows;
	}

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows()
	{
		return maxRows;
	}

	/** 
	 * Inserts a new row in the CLQINFO table.
	 */
	public ClqinfoPk insert(Clqinfo dto) throws ClqinfoDaoException
	{
		try {
			return session.insert(dto);
		}
		catch (ClqinfoDaoException daoException) {
			throw daoException;
		}
		catch (Exception ex) {
			logger.error( ex);
			throw new ClqinfoDaoException( ex.getMessage() );
		}
		
	}

	/** 
	 * Updates a single row in the CLQINFO table.
	 */
	public void update(ClqinfoPk pk, Clqinfo dto) throws ClqinfoDaoException
	{
		try {
			session.update(pk, dto);
		}
		catch (ClqinfoDaoException daoException) {
			throw daoException;
		}
		catch (Exception ex) {
			logger.error( ex);
			throw new ClqinfoDaoException( ex.getMessage() );
		}
		
	}

	/** 
	 * Deletes a single row in the CLQINFO table.
	 */
	public void delete(ClqinfoPk pk) throws ClqinfoDaoException
	{
		try {
			session.delete(pk);
		}
		catch (ClqinfoDaoException daoException) {
			throw daoException;
		}
		catch (Exception ex) {
			logger.error( ex);
			throw new ClqinfoDaoException( ex.getMessage() );
		}
		
	}

	/**
	 * Method 'findByPrimaryKey'
	 * 
	 * @param pk
	 * @throws ClqinfoDaoException
	 * @return Clqinfo
	 */
	public Clqinfo findByPrimaryKey(ClqinfoPk pk) throws ClqinfoDaoException
	{
		try {
			return session.findByPrimaryKey(pk);
		}
		catch (ClqinfoDaoException daoException) {
			throw daoException;
		}
		catch (Exception ex) {
			logger.error( ex);
			throw new ClqinfoDaoException( ex.getMessage() );
		}
		
	}

	/**
	 * Method 'findByPrimaryKey'
	 * 
	 * @param clqinfoId
	 * @throws ClqinfoDaoException
	 * @return Clqinfo
	 */
	public Clqinfo findByPrimaryKey(long clqinfoId) throws ClqinfoDaoException
	{
		try {
			return session.findByPrimaryKey(clqinfoId);
		}
		catch (ClqinfoDaoException daoException) {
			throw daoException;
		}
		catch (Exception ex) {
			logger.error( ex);
			throw new ClqinfoDaoException( ex.getMessage() );
		}
		
	}

	/**
	 * Method 'findAll'
	 * 
	 * @throws ClqinfoDaoException
	 * @return Clqinfo[]
	 */
	public Clqinfo[] findAll() throws ClqinfoDaoException
	{
		try {
			return session.findAll();
		}
		catch (ClqinfoDaoException daoException) {
			throw daoException;
		}
		catch (Exception ex) {
			logger.error( ex);
			throw new ClqinfoDaoException( ex.getMessage() );
		}
		
	}

	/**
	 * Method 'findWhereClqinfoIdEquals'
	 * 
	 * @param clqinfoId
	 * @throws ClqinfoDaoException
	 * @return Clqinfo[]
	 */
	public Clqinfo[] findWhereClqinfoIdEquals(long clqinfoId) throws ClqinfoDaoException
	{
		try {
			return session.findWhereClqinfoIdEquals(clqinfoId);
		}
		catch (ClqinfoDaoException daoException) {
			throw daoException;
		}
		catch (Exception ex) {
			logger.error( ex);
			throw new ClqinfoDaoException( ex.getMessage() );
		}
		
	}

	/**
	 * Method 'findWhereNetworkinfoIdEquals'
	 * 
	 * @param networkinfoId
	 * @throws ClqinfoDaoException
	 * @return Clqinfo[]
	 */
	public Clqinfo[] findWhereNetworkinfoIdEquals(long networkinfoId) throws ClqinfoDaoException
	{
		try {
			return session.findWhereNetworkinfoIdEquals(networkinfoId);
		}
		catch (ClqinfoDaoException daoException) {
			throw daoException;
		}
		catch (Exception ex) {
			logger.error( ex);
			throw new ClqinfoDaoException( ex.getMessage() );
		}
		
	}

	/**
	 * Method 'findWhereNameEquals'
	 * 
	 * @param name
	 * @throws ClqinfoDaoException
	 * @return Clqinfo[]
	 */
	public Clqinfo[] findWhereNameEquals(String name) throws ClqinfoDaoException
	{
		try {
			return session.findWhereNameEquals(name);
		}
		catch (ClqinfoDaoException daoException) {
			throw daoException;
		}
		catch (Exception ex) {
			logger.error( ex);
			throw new ClqinfoDaoException( ex.getMessage() );
		}
		
	}

	/**
	 * Method 'findWhereCmdlineEquals'
	 * 
	 * @param cmdline
	 * @throws ClqinfoDaoException
	 * @return Clqinfo[]
	 */
	public Clqinfo[] findWhereCmdlineEquals(String cmdline) throws ClqinfoDaoException
	{
		try {
			return session.findWhereCmdlineEquals(cmdline);
		}
		catch (ClqinfoDaoException daoException) {
			throw daoException;
		}
		catch (Exception ex) {
			logger.error( ex);
			throw new ClqinfoDaoException( ex.getMessage() );
		}
		
	}

	/**
	 * Method 'findWhereResultEquals'
	 * 
	 * @param result
	 * @throws ClqinfoDaoException
	 * @return Clqinfo[]
	 */
	public Clqinfo[] findWhereResultEquals(String result) throws ClqinfoDaoException
	{
		try {
			return session.findWhereResultEquals(result);
		}
		catch (ClqinfoDaoException daoException) {
			throw daoException;
		}
		catch (Exception ex) {
			logger.error( ex);
			throw new ClqinfoDaoException( ex.getMessage() );
		}
		
	}

	/**
	 * Method 'findByDynamicSelect'
	 * 
	 * @param sql
	 * @param sqlParams
	 * @throws ClqinfoDaoException
	 * @return Clqinfo[]
	 */
	public Clqinfo[] findByDynamicSelect(String sql, Object[] sqlParams) throws ClqinfoDaoException
	{
		try {
			return session.findByDynamicSelect(sql, sqlParams);
		}
		catch (ClqinfoDaoException daoException) {
			throw daoException;
		}
		catch (Exception ex) {
			logger.error( ex);
			throw new ClqinfoDaoException( ex.getMessage() );
		}
		
	}

	/**
	 * Method 'findByDynamicWhere'
	 * 
	 * @param sql
	 * @param sqlParams
	 * @throws ClqinfoDaoException
	 * @return Clqinfo[]
	 */
	public Clqinfo[] findByDynamicWhere(String sql, Object[] sqlParams) throws ClqinfoDaoException
	{
		try {
			return session.findByDynamicWhere(sql, sqlParams);
		}
		catch (ClqinfoDaoException daoException) {
			throw daoException;
		}
		catch (Exception ex) {
			logger.error( ex);
			throw new ClqinfoDaoException( ex.getMessage() );
		}
		
	}

}
