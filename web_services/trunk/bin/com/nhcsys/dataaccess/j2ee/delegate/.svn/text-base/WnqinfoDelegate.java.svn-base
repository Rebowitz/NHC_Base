/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package com.nhcsys.dataaccess.j2ee.delegate;

import com.nhcsys.dataaccess.dao.*;
import com.nhcsys.dataaccess.dto.*;
import com.nhcsys.dataaccess.exceptions.*;
import com.nhcsys.dataaccess.j2ee.session.*;
import java.rmi.RemoteException;
import java.math.*;
import java.util.Date;
import javax.ejb.*;
import org.apache.log4j.Logger;

public class WnqinfoDelegate implements WnqinfoDao
{
	private WnqinfoSession session;

	protected static final Logger logger = Logger.getLogger( WnqinfoDelegate.class );

	private int maxRows;

	/**
	 * Method 'WnqinfoDelegate'
	 * 
	 * @param session
	 */
	public WnqinfoDelegate(final WnqinfoSession session)
	{
		this.session = session;
	}

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows)
	{
		this.maxRows = maxRows;
	}

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows()
	{
		return maxRows;
	}

	/** 
	 * Inserts a new row in the WNQINFO table.
	 */
	public WnqinfoPk insert(Wnqinfo dto) throws WnqinfoDaoException
	{
		try {
			return session.insert(dto);
		}
		catch (WnqinfoDaoException daoException) {
			throw daoException;
		}
		catch (Exception ex) {
			logger.error( ex);
			throw new WnqinfoDaoException( ex.getMessage() );
		}
		
	}

	/** 
	 * Updates a single row in the WNQINFO table.
	 */
	public void update(WnqinfoPk pk, Wnqinfo dto) throws WnqinfoDaoException
	{
		try {
			session.update(pk, dto);
		}
		catch (WnqinfoDaoException daoException) {
			throw daoException;
		}
		catch (Exception ex) {
			logger.error( ex);
			throw new WnqinfoDaoException( ex.getMessage() );
		}
		
	}

	/** 
	 * Deletes a single row in the WNQINFO table.
	 */
	public void delete(WnqinfoPk pk) throws WnqinfoDaoException
	{
		try {
			session.delete(pk);
		}
		catch (WnqinfoDaoException daoException) {
			throw daoException;
		}
		catch (Exception ex) {
			logger.error( ex);
			throw new WnqinfoDaoException( ex.getMessage() );
		}
		
	}

	/**
	 * Method 'findByPrimaryKey'
	 * 
	 * @param pk
	 * @throws WnqinfoDaoException
	 * @return Wnqinfo
	 */
	public Wnqinfo findByPrimaryKey(WnqinfoPk pk) throws WnqinfoDaoException
	{
		try {
			return session.findByPrimaryKey(pk);
		}
		catch (WnqinfoDaoException daoException) {
			throw daoException;
		}
		catch (Exception ex) {
			logger.error( ex);
			throw new WnqinfoDaoException( ex.getMessage() );
		}
		
	}

	/**
	 * Method 'findByPrimaryKey'
	 * 
	 * @param wnqinfoId
	 * @throws WnqinfoDaoException
	 * @return Wnqinfo
	 */
	public Wnqinfo findByPrimaryKey(long wnqinfoId) throws WnqinfoDaoException
	{
		try {
			return session.findByPrimaryKey(wnqinfoId);
		}
		catch (WnqinfoDaoException daoException) {
			throw daoException;
		}
		catch (Exception ex) {
			logger.error( ex);
			throw new WnqinfoDaoException( ex.getMessage() );
		}
		
	}

	/**
	 * Method 'findAll'
	 * 
	 * @throws WnqinfoDaoException
	 * @return Wnqinfo[]
	 */
	public Wnqinfo[] findAll() throws WnqinfoDaoException
	{
		try {
			return session.findAll();
		}
		catch (WnqinfoDaoException daoException) {
			throw daoException;
		}
		catch (Exception ex) {
			logger.error( ex);
			throw new WnqinfoDaoException( ex.getMessage() );
		}
		
	}

	/**
	 * Method 'findWhereWnqinfoIdEquals'
	 * 
	 * @param wnqinfoId
	 * @throws WnqinfoDaoException
	 * @return Wnqinfo[]
	 */
	public Wnqinfo[] findWhereWnqinfoIdEquals(long wnqinfoId) throws WnqinfoDaoException
	{
		try {
			return session.findWhereWnqinfoIdEquals(wnqinfoId);
		}
		catch (WnqinfoDaoException daoException) {
			throw daoException;
		}
		catch (Exception ex) {
			logger.error( ex);
			throw new WnqinfoDaoException( ex.getMessage() );
		}
		
	}

	/**
	 * Method 'findWhereNetworkinfoIdEquals'
	 * 
	 * @param networkinfoId
	 * @throws WnqinfoDaoException
	 * @return Wnqinfo[]
	 */
	public Wnqinfo[] findWhereNetworkinfoIdEquals(long networkinfoId) throws WnqinfoDaoException
	{
		try {
			return session.findWhereNetworkinfoIdEquals(networkinfoId);
		}
		catch (WnqinfoDaoException daoException) {
			throw daoException;
		}
		catch (Exception ex) {
			logger.error( ex);
			throw new WnqinfoDaoException( ex.getMessage() );
		}
		
	}

	/**
	 * Method 'findWhereProviderEquals'
	 * 
	 * @param provider
	 * @throws WnqinfoDaoException
	 * @return Wnqinfo[]
	 */
	public Wnqinfo[] findWhereProviderEquals(String provider) throws WnqinfoDaoException
	{
		try {
			return session.findWhereProviderEquals(provider);
		}
		catch (WnqinfoDaoException daoException) {
			throw daoException;
		}
		catch (Exception ex) {
			logger.error( ex);
			throw new WnqinfoDaoException( ex.getMessage() );
		}
		
	}

	/**
	 * Method 'findWhereRemotenameEquals'
	 * 
	 * @param remotename
	 * @throws WnqinfoDaoException
	 * @return Wnqinfo[]
	 */
	public Wnqinfo[] findWhereRemotenameEquals(String remotename) throws WnqinfoDaoException
	{
		try {
			return session.findWhereRemotenameEquals(remotename);
		}
		catch (WnqinfoDaoException daoException) {
			throw daoException;
		}
		catch (Exception ex) {
			logger.error( ex);
			throw new WnqinfoDaoException( ex.getMessage() );
		}
		
	}

	/**
	 * Method 'findWhereLocalnameEquals'
	 * 
	 * @param localname
	 * @throws WnqinfoDaoException
	 * @return Wnqinfo[]
	 */
	public Wnqinfo[] findWhereLocalnameEquals(String localname) throws WnqinfoDaoException
	{
		try {
			return session.findWhereLocalnameEquals(localname);
		}
		catch (WnqinfoDaoException daoException) {
			throw daoException;
		}
		catch (Exception ex) {
			logger.error( ex);
			throw new WnqinfoDaoException( ex.getMessage() );
		}
		
	}

	/**
	 * Method 'findWhereIpaddressEquals'
	 * 
	 * @param ipaddress
	 * @throws WnqinfoDaoException
	 * @return Wnqinfo[]
	 */
	public Wnqinfo[] findWhereIpaddressEquals(String ipaddress) throws WnqinfoDaoException
	{
		try {
			return session.findWhereIpaddressEquals(ipaddress);
		}
		catch (WnqinfoDaoException daoException) {
			throw daoException;
		}
		catch (Exception ex) {
			logger.error( ex);
			throw new WnqinfoDaoException( ex.getMessage() );
		}
		
	}

	/**
	 * Method 'findWhereWnqcommentEquals'
	 * 
	 * @param wnqcomment
	 * @throws WnqinfoDaoException
	 * @return Wnqinfo[]
	 */
	public Wnqinfo[] findWhereWnqcommentEquals(String wnqcomment) throws WnqinfoDaoException
	{
		try {
			return session.findWhereWnqcommentEquals(wnqcomment);
		}
		catch (WnqinfoDaoException daoException) {
			throw daoException;
		}
		catch (Exception ex) {
			logger.error( ex);
			throw new WnqinfoDaoException( ex.getMessage() );
		}
		
	}

	/**
	 * Method 'findWhereDisplaytypeEquals'
	 * 
	 * @param displaytype
	 * @throws WnqinfoDaoException
	 * @return Wnqinfo[]
	 */
	public Wnqinfo[] findWhereDisplaytypeEquals(String displaytype) throws WnqinfoDaoException
	{
		try {
			return session.findWhereDisplaytypeEquals(displaytype);
		}
		catch (WnqinfoDaoException daoException) {
			throw daoException;
		}
		catch (Exception ex) {
			logger.error( ex);
			throw new WnqinfoDaoException( ex.getMessage() );
		}
		
	}

	/**
	 * Method 'findWhereWnqscopeEquals'
	 * 
	 * @param wnqscope
	 * @throws WnqinfoDaoException
	 * @return Wnqinfo[]
	 */
	public Wnqinfo[] findWhereWnqscopeEquals(String wnqscope) throws WnqinfoDaoException
	{
		try {
			return session.findWhereWnqscopeEquals(wnqscope);
		}
		catch (WnqinfoDaoException daoException) {
			throw daoException;
		}
		catch (Exception ex) {
			logger.error( ex);
			throw new WnqinfoDaoException( ex.getMessage() );
		}
		
	}

	/**
	 * Method 'findWhereWnqtypeEquals'
	 * 
	 * @param wnqtype
	 * @throws WnqinfoDaoException
	 * @return Wnqinfo[]
	 */
	public Wnqinfo[] findWhereWnqtypeEquals(String wnqtype) throws WnqinfoDaoException
	{
		try {
			return session.findWhereWnqtypeEquals(wnqtype);
		}
		catch (WnqinfoDaoException daoException) {
			throw daoException;
		}
		catch (Exception ex) {
			logger.error( ex);
			throw new WnqinfoDaoException( ex.getMessage() );
		}
		
	}

	/**
	 * Method 'findWhereWnqusageEquals'
	 * 
	 * @param wnqusage
	 * @throws WnqinfoDaoException
	 * @return Wnqinfo[]
	 */
	public Wnqinfo[] findWhereWnqusageEquals(String wnqusage) throws WnqinfoDaoException
	{
		try {
			return session.findWhereWnqusageEquals(wnqusage);
		}
		catch (WnqinfoDaoException daoException) {
			throw daoException;
		}
		catch (Exception ex) {
			logger.error( ex);
			throw new WnqinfoDaoException( ex.getMessage() );
		}
		
	}

	/**
	 * Method 'findByDynamicSelect'
	 * 
	 * @param sql
	 * @param sqlParams
	 * @throws WnqinfoDaoException
	 * @return Wnqinfo[]
	 */
	public Wnqinfo[] findByDynamicSelect(String sql, Object[] sqlParams) throws WnqinfoDaoException
	{
		try {
			return session.findByDynamicSelect(sql, sqlParams);
		}
		catch (WnqinfoDaoException daoException) {
			throw daoException;
		}
		catch (Exception ex) {
			logger.error( ex);
			throw new WnqinfoDaoException( ex.getMessage() );
		}
		
	}

	/**
	 * Method 'findByDynamicWhere'
	 * 
	 * @param sql
	 * @param sqlParams
	 * @throws WnqinfoDaoException
	 * @return Wnqinfo[]
	 */
	public Wnqinfo[] findByDynamicWhere(String sql, Object[] sqlParams) throws WnqinfoDaoException
	{
		try {
			return session.findByDynamicWhere(sql, sqlParams);
		}
		catch (WnqinfoDaoException daoException) {
			throw daoException;
		}
		catch (Exception ex) {
			logger.error( ex);
			throw new WnqinfoDaoException( ex.getMessage() );
		}
		
	}

}
