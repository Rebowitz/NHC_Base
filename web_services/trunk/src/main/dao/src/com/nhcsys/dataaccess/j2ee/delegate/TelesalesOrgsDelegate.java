/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package com.nhcsys.dataaccess.j2ee.delegate;

import com.nhcsys.dataaccess.dao.*;
import com.nhcsys.dataaccess.dto.*;
import com.nhcsys.dataaccess.exceptions.*;
import com.nhcsys.dataaccess.j2ee.session.*;
import java.rmi.RemoteException;
import java.math.*;
import java.util.Date;
import javax.ejb.*;
import org.apache.log4j.Logger;

public class TelesalesOrgsDelegate implements TelesalesOrgsDao
{
	private TelesalesOrgsSession session;

	protected static final Logger logger = Logger.getLogger( TelesalesOrgsDelegate.class );

	private int maxRows;

	/**
	 * Method 'TelesalesOrgsDelegate'
	 * 
	 * @param session
	 */
	public TelesalesOrgsDelegate(final TelesalesOrgsSession session)
	{
		this.session = session;
	}

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows)
	{
		this.maxRows = maxRows;
	}

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows()
	{
		return maxRows;
	}

	/** 
	 * Inserts a new row in the TELESALES_ORGS table.
	 */
	public TelesalesOrgsPk insert(TelesalesOrgs dto) throws TelesalesOrgsDaoException
	{
		try {
			return session.insert(dto);
		}
		catch (TelesalesOrgsDaoException daoException) {
			throw daoException;
		}
		catch (Exception ex) {
			logger.error( ex);
			throw new TelesalesOrgsDaoException( ex.getMessage() );
		}
		
	}

	/** 
	 * Updates a single row in the TELESALES_ORGS table.
	 */
	public void update(TelesalesOrgsPk pk, TelesalesOrgs dto) throws TelesalesOrgsDaoException
	{
		try {
			session.update(pk, dto);
		}
		catch (TelesalesOrgsDaoException daoException) {
			throw daoException;
		}
		catch (Exception ex) {
			logger.error( ex);
			throw new TelesalesOrgsDaoException( ex.getMessage() );
		}
		
	}

	/** 
	 * Deletes a single row in the TELESALES_ORGS table.
	 */
	public void delete(TelesalesOrgsPk pk) throws TelesalesOrgsDaoException
	{
		try {
			session.delete(pk);
		}
		catch (TelesalesOrgsDaoException daoException) {
			throw daoException;
		}
		catch (Exception ex) {
			logger.error( ex);
			throw new TelesalesOrgsDaoException( ex.getMessage() );
		}
		
	}

	/**
	 * Method 'findByPrimaryKey'
	 * 
	 * @param pk
	 * @throws TelesalesOrgsDaoException
	 * @return TelesalesOrgs
	 */
	public TelesalesOrgs findByPrimaryKey(TelesalesOrgsPk pk) throws TelesalesOrgsDaoException
	{
		try {
			return session.findByPrimaryKey(pk);
		}
		catch (TelesalesOrgsDaoException daoException) {
			throw daoException;
		}
		catch (Exception ex) {
			logger.error( ex);
			throw new TelesalesOrgsDaoException( ex.getMessage() );
		}
		
	}

	/**
	 * Method 'findByPrimaryKey'
	 * 
	 * @param orgId
	 * @throws TelesalesOrgsDaoException
	 * @return TelesalesOrgs
	 */
	public TelesalesOrgs findByPrimaryKey(long orgId) throws TelesalesOrgsDaoException
	{
		try {
			return session.findByPrimaryKey(orgId);
		}
		catch (TelesalesOrgsDaoException daoException) {
			throw daoException;
		}
		catch (Exception ex) {
			logger.error( ex);
			throw new TelesalesOrgsDaoException( ex.getMessage() );
		}
		
	}

	/**
	 * Method 'findAll'
	 * 
	 * @throws TelesalesOrgsDaoException
	 * @return TelesalesOrgs[]
	 */
	public TelesalesOrgs[] findAll() throws TelesalesOrgsDaoException
	{
		try {
			return session.findAll();
		}
		catch (TelesalesOrgsDaoException daoException) {
			throw daoException;
		}
		catch (Exception ex) {
			logger.error( ex);
			throw new TelesalesOrgsDaoException( ex.getMessage() );
		}
		
	}

	/**
	 * Method 'findWhereOrgIdEquals'
	 * 
	 * @param orgId
	 * @throws TelesalesOrgsDaoException
	 * @return TelesalesOrgs[]
	 */
	public TelesalesOrgs[] findWhereOrgIdEquals(long orgId) throws TelesalesOrgsDaoException
	{
		try {
			return session.findWhereOrgIdEquals(orgId);
		}
		catch (TelesalesOrgsDaoException daoException) {
			throw daoException;
		}
		catch (Exception ex) {
			logger.error( ex);
			throw new TelesalesOrgsDaoException( ex.getMessage() );
		}
		
	}

	/**
	 * Method 'findWhereOrgNameEquals'
	 * 
	 * @param orgName
	 * @throws TelesalesOrgsDaoException
	 * @return TelesalesOrgs[]
	 */
	public TelesalesOrgs[] findWhereOrgNameEquals(String orgName) throws TelesalesOrgsDaoException
	{
		try {
			return session.findWhereOrgNameEquals(orgName);
		}
		catch (TelesalesOrgsDaoException daoException) {
			throw daoException;
		}
		catch (Exception ex) {
			logger.error( ex);
			throw new TelesalesOrgsDaoException( ex.getMessage() );
		}
		
	}

	/**
	 * Method 'findWhereConfigValueEquals'
	 * 
	 * @param configValue
	 * @throws TelesalesOrgsDaoException
	 * @return TelesalesOrgs[]
	 */
	public TelesalesOrgs[] findWhereConfigValueEquals(String configValue) throws TelesalesOrgsDaoException
	{
		try {
			return session.findWhereConfigValueEquals(configValue);
		}
		catch (TelesalesOrgsDaoException daoException) {
			throw daoException;
		}
		catch (Exception ex) {
			logger.error( ex);
			throw new TelesalesOrgsDaoException( ex.getMessage() );
		}
		
	}

	/**
	 * Method 'findByDynamicSelect'
	 * 
	 * @param sql
	 * @param sqlParams
	 * @throws TelesalesOrgsDaoException
	 * @return TelesalesOrgs[]
	 */
	public TelesalesOrgs[] findByDynamicSelect(String sql, Object[] sqlParams) throws TelesalesOrgsDaoException
	{
		try {
			return session.findByDynamicSelect(sql, sqlParams);
		}
		catch (TelesalesOrgsDaoException daoException) {
			throw daoException;
		}
		catch (Exception ex) {
			logger.error( ex);
			throw new TelesalesOrgsDaoException( ex.getMessage() );
		}
		
	}

	/**
	 * Method 'findByDynamicWhere'
	 * 
	 * @param sql
	 * @param sqlParams
	 * @throws TelesalesOrgsDaoException
	 * @return TelesalesOrgs[]
	 */
	public TelesalesOrgs[] findByDynamicWhere(String sql, Object[] sqlParams) throws TelesalesOrgsDaoException
	{
		try {
			return session.findByDynamicWhere(sql, sqlParams);
		}
		catch (TelesalesOrgsDaoException daoException) {
			throw daoException;
		}
		catch (Exception ex) {
			logger.error( ex);
			throw new TelesalesOrgsDaoException( ex.getMessage() );
		}
		
	}

}
