/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package com.nhcsys.dataaccess.j2ee.delegate;

import com.nhcsys.dataaccess.dao.*;
import com.nhcsys.dataaccess.dto.*;
import com.nhcsys.dataaccess.exceptions.*;
import com.nhcsys.dataaccess.j2ee.session.*;
import java.rmi.RemoteException;
import java.math.*;
import java.util.Date;
import javax.ejb.*;
import org.apache.log4j.Logger;

public class MessagesDelegate implements MessagesDao
{
	private MessagesSession session;

	protected static final Logger logger = Logger.getLogger( MessagesDelegate.class );

	private int maxRows;

	/**
	 * Method 'MessagesDelegate'
	 * 
	 * @param session
	 */
	public MessagesDelegate(final MessagesSession session)
	{
		this.session = session;
	}

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows)
	{
		this.maxRows = maxRows;
	}

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows()
	{
		return maxRows;
	}

	/** 
	 * Inserts a new row in the MESSAGES table.
	 */
	public MessagesPk insert(Messages dto) throws MessagesDaoException
	{
		try {
			return session.insert(dto);
		}
		catch (MessagesDaoException daoException) {
			throw daoException;
		}
		catch (Exception ex) {
			logger.error( ex);
			throw new MessagesDaoException( ex.getMessage() );
		}
		
	}

	/** 
	 * Updates a single row in the MESSAGES table.
	 */
	public void update(MessagesPk pk, Messages dto) throws MessagesDaoException
	{
		try {
			session.update(pk, dto);
		}
		catch (MessagesDaoException daoException) {
			throw daoException;
		}
		catch (Exception ex) {
			logger.error( ex);
			throw new MessagesDaoException( ex.getMessage() );
		}
		
	}

	/** 
	 * Deletes a single row in the MESSAGES table.
	 */
	public void delete(MessagesPk pk) throws MessagesDaoException
	{
		try {
			session.delete(pk);
		}
		catch (MessagesDaoException daoException) {
			throw daoException;
		}
		catch (Exception ex) {
			logger.error( ex);
			throw new MessagesDaoException( ex.getMessage() );
		}
		
	}

	/**
	 * Method 'findByPrimaryKey'
	 * 
	 * @param pk
	 * @throws MessagesDaoException
	 * @return Messages
	 */
	public Messages findByPrimaryKey(MessagesPk pk) throws MessagesDaoException
	{
		try {
			return session.findByPrimaryKey(pk);
		}
		catch (MessagesDaoException daoException) {
			throw daoException;
		}
		catch (Exception ex) {
			logger.error( ex);
			throw new MessagesDaoException( ex.getMessage() );
		}
		
	}

	/**
	 * Method 'findByPrimaryKey'
	 * 
	 * @param messageId
	 * @throws MessagesDaoException
	 * @return Messages
	 */
	public Messages findByPrimaryKey(long messageId) throws MessagesDaoException
	{
		try {
			return session.findByPrimaryKey(messageId);
		}
		catch (MessagesDaoException daoException) {
			throw daoException;
		}
		catch (Exception ex) {
			logger.error( ex);
			throw new MessagesDaoException( ex.getMessage() );
		}
		
	}

	/**
	 * Method 'findAll'
	 * 
	 * @throws MessagesDaoException
	 * @return Messages[]
	 */
	public Messages[] findAll() throws MessagesDaoException
	{
		try {
			return session.findAll();
		}
		catch (MessagesDaoException daoException) {
			throw daoException;
		}
		catch (Exception ex) {
			logger.error( ex);
			throw new MessagesDaoException( ex.getMessage() );
		}
		
	}

	/**
	 * Method 'findWhereMessageIdEquals'
	 * 
	 * @param messageId
	 * @throws MessagesDaoException
	 * @return Messages[]
	 */
	public Messages[] findWhereMessageIdEquals(long messageId) throws MessagesDaoException
	{
		try {
			return session.findWhereMessageIdEquals(messageId);
		}
		catch (MessagesDaoException daoException) {
			throw daoException;
		}
		catch (Exception ex) {
			logger.error( ex);
			throw new MessagesDaoException( ex.getMessage() );
		}
		
	}

	/**
	 * Method 'findWhereTypeEquals'
	 * 
	 * @param type
	 * @throws MessagesDaoException
	 * @return Messages[]
	 */
	public Messages[] findWhereTypeEquals(String type) throws MessagesDaoException
	{
		try {
			return session.findWhereTypeEquals(type);
		}
		catch (MessagesDaoException daoException) {
			throw daoException;
		}
		catch (Exception ex) {
			logger.error( ex);
			throw new MessagesDaoException( ex.getMessage() );
		}
		
	}

	/**
	 * Method 'findWhereStartTimeEquals'
	 * 
	 * @param startTime
	 * @throws MessagesDaoException
	 * @return Messages[]
	 */
	public Messages[] findWhereStartTimeEquals(Date startTime) throws MessagesDaoException
	{
		try {
			return session.findWhereStartTimeEquals(startTime);
		}
		catch (MessagesDaoException daoException) {
			throw daoException;
		}
		catch (Exception ex) {
			logger.error( ex);
			throw new MessagesDaoException( ex.getMessage() );
		}
		
	}

	/**
	 * Method 'findWhereEndTimeEquals'
	 * 
	 * @param endTime
	 * @throws MessagesDaoException
	 * @return Messages[]
	 */
	public Messages[] findWhereEndTimeEquals(Date endTime) throws MessagesDaoException
	{
		try {
			return session.findWhereEndTimeEquals(endTime);
		}
		catch (MessagesDaoException daoException) {
			throw daoException;
		}
		catch (Exception ex) {
			logger.error( ex);
			throw new MessagesDaoException( ex.getMessage() );
		}
		
	}

	/**
	 * Method 'findWhereModTimeEquals'
	 * 
	 * @param modTime
	 * @throws MessagesDaoException
	 * @return Messages[]
	 */
	public Messages[] findWhereModTimeEquals(Date modTime) throws MessagesDaoException
	{
		try {
			return session.findWhereModTimeEquals(modTime);
		}
		catch (MessagesDaoException daoException) {
			throw daoException;
		}
		catch (Exception ex) {
			logger.error( ex);
			throw new MessagesDaoException( ex.getMessage() );
		}
		
	}

	/**
	 * Method 'findWhereTitleEquals'
	 * 
	 * @param title
	 * @throws MessagesDaoException
	 * @return Messages[]
	 */
	public Messages[] findWhereTitleEquals(String title) throws MessagesDaoException
	{
		try {
			return session.findWhereTitleEquals(title);
		}
		catch (MessagesDaoException daoException) {
			throw daoException;
		}
		catch (Exception ex) {
			logger.error( ex);
			throw new MessagesDaoException( ex.getMessage() );
		}
		
	}

	/**
	 * Method 'findWhereContentsEquals'
	 * 
	 * @param contents
	 * @throws MessagesDaoException
	 * @return Messages[]
	 */
	public Messages[] findWhereContentsEquals(String contents) throws MessagesDaoException
	{
		try {
			return session.findWhereContentsEquals(contents);
		}
		catch (MessagesDaoException daoException) {
			throw daoException;
		}
		catch (Exception ex) {
			logger.error( ex);
			throw new MessagesDaoException( ex.getMessage() );
		}
		
	}

	/**
	 * Method 'findWhereSummaryEquals'
	 * 
	 * @param summary
	 * @throws MessagesDaoException
	 * @return Messages[]
	 */
	public Messages[] findWhereSummaryEquals(String summary) throws MessagesDaoException
	{
		try {
			return session.findWhereSummaryEquals(summary);
		}
		catch (MessagesDaoException daoException) {
			throw daoException;
		}
		catch (Exception ex) {
			logger.error( ex);
			throw new MessagesDaoException( ex.getMessage() );
		}
		
	}

	/**
	 * Method 'findWherePriorityEquals'
	 * 
	 * @param priority
	 * @throws MessagesDaoException
	 * @return Messages[]
	 */
	public Messages[] findWherePriorityEquals(String priority) throws MessagesDaoException
	{
		try {
			return session.findWherePriorityEquals(priority);
		}
		catch (MessagesDaoException daoException) {
			throw daoException;
		}
		catch (Exception ex) {
			logger.error( ex);
			throw new MessagesDaoException( ex.getMessage() );
		}
		
	}

	/**
	 * Method 'findWherePopupDurationEquals'
	 * 
	 * @param popupDuration
	 * @throws MessagesDaoException
	 * @return Messages[]
	 */
	public Messages[] findWherePopupDurationEquals(long popupDuration) throws MessagesDaoException
	{
		try {
			return session.findWherePopupDurationEquals(popupDuration);
		}
		catch (MessagesDaoException daoException) {
			throw daoException;
		}
		catch (Exception ex) {
			logger.error( ex);
			throw new MessagesDaoException( ex.getMessage() );
		}
		
	}

	/**
	 * Method 'findWhereClickDestinationUrlEquals'
	 * 
	 * @param clickDestinationUrl
	 * @throws MessagesDaoException
	 * @return Messages[]
	 */
	public Messages[] findWhereClickDestinationUrlEquals(String clickDestinationUrl) throws MessagesDaoException
	{
		try {
			return session.findWhereClickDestinationUrlEquals(clickDestinationUrl);
		}
		catch (MessagesDaoException daoException) {
			throw daoException;
		}
		catch (Exception ex) {
			logger.error( ex);
			throw new MessagesDaoException( ex.getMessage() );
		}
		
	}

	/**
	 * Method 'findWhereDestinationEquals'
	 * 
	 * @param destination
	 * @throws MessagesDaoException
	 * @return Messages[]
	 */
	public Messages[] findWhereDestinationEquals(String destination) throws MessagesDaoException
	{
		try {
			return session.findWhereDestinationEquals(destination);
		}
		catch (MessagesDaoException daoException) {
			throw daoException;
		}
		catch (Exception ex) {
			logger.error( ex);
			throw new MessagesDaoException( ex.getMessage() );
		}
		
	}

	/**
	 * Method 'findWhereGroupNameEquals'
	 * 
	 * @param groupName
	 * @throws MessagesDaoException
	 * @return Messages[]
	 */
	public Messages[] findWhereGroupNameEquals(String groupName) throws MessagesDaoException
	{
		try {
			return session.findWhereGroupNameEquals(groupName);
		}
		catch (MessagesDaoException daoException) {
			throw daoException;
		}
		catch (Exception ex) {
			logger.error( ex);
			throw new MessagesDaoException( ex.getMessage() );
		}
		
	}

	/**
	 * Method 'findWhereViveIdEquals'
	 * 
	 * @param viveId
	 * @throws MessagesDaoException
	 * @return Messages[]
	 */
	public Messages[] findWhereViveIdEquals(String viveId) throws MessagesDaoException
	{
		try {
			return session.findWhereViveIdEquals(viveId);
		}
		catch (MessagesDaoException daoException) {
			throw daoException;
		}
		catch (Exception ex) {
			logger.error( ex);
			throw new MessagesDaoException( ex.getMessage() );
		}
		
	}

	/**
	 * Method 'findByDynamicSelect'
	 * 
	 * @param sql
	 * @param sqlParams
	 * @throws MessagesDaoException
	 * @return Messages[]
	 */
	public Messages[] findByDynamicSelect(String sql, Object[] sqlParams) throws MessagesDaoException
	{
		try {
			return session.findByDynamicSelect(sql, sqlParams);
		}
		catch (MessagesDaoException daoException) {
			throw daoException;
		}
		catch (Exception ex) {
			logger.error( ex);
			throw new MessagesDaoException( ex.getMessage() );
		}
		
	}

	/**
	 * Method 'findByDynamicWhere'
	 * 
	 * @param sql
	 * @param sqlParams
	 * @throws MessagesDaoException
	 * @return Messages[]
	 */
	public Messages[] findByDynamicWhere(String sql, Object[] sqlParams) throws MessagesDaoException
	{
		try {
			return session.findByDynamicWhere(sql, sqlParams);
		}
		catch (MessagesDaoException daoException) {
			throw daoException;
		}
		catch (Exception ex) {
			logger.error( ex);
			throw new MessagesDaoException( ex.getMessage() );
		}
		
	}

}
