/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package com.nhcsys.dataaccess.jdbc;

import com.nhcsys.dataaccess.dao.*;
import com.nhcsys.dataaccess.factory.*;
import com.nhcsys.dataaccess.dto.*;
import com.nhcsys.dataaccess.exceptions.*;
import java.sql.Connection;
import java.util.Collection;
import org.apache.log4j.Logger;
import java.sql.PreparedStatement;
import java.sql.Statement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Time;
import java.util.List;
import java.util.Iterator;
import java.util.ArrayList;

public class TelesalesRepsDaoImpl extends AbstractDAO implements TelesalesRepsDao
{
	/** 
	 * The factory class for this DAO has two versions of the create() method - one that
takes no arguments and one that takes a Connection argument. If the Connection version
is chosen then the connection will be stored in this attribute and will be used by all
calls to this DAO, otherwise a new Connection will be allocated for each operation.
	 */
	protected java.sql.Connection userConn;

	protected static final Logger logger = Logger.getLogger( TelesalesRepsDaoImpl.class );

	/** 
	 * All finder methods in this class use this SELECT constant to build their queries
	 */
	protected final String SQL_SELECT = "SELECT REP_ID, ORG_ID, USER_ID, PASSWORD_TEXT FROM " + getTableName() + "";

	/** 
	 * Finder methods will pass this value to the JDBC setMaxRows method
	 */
	private int maxRows;

	/** 
	 * SQL INSERT statement for this table
	 */
	protected final String SQL_INSERT = "INSERT INTO " + getTableName() + " ( REP_ID, ORG_ID, USER_ID, PASSWORD_TEXT ) VALUES ( ?, ?, ?, ? )";

	/** 
	 * SQL UPDATE statement for this table
	 */
	protected final String SQL_UPDATE = "UPDATE " + getTableName() + " SET REP_ID = ?, ORG_ID = ?, USER_ID = ?, PASSWORD_TEXT = ? WHERE REP_ID = ?";

	/** 
	 * SQL DELETE statement for this table
	 */
	protected final String SQL_DELETE = "DELETE FROM " + getTableName() + " WHERE REP_ID = ?";

	/** 
	 * Index of column REP_ID
	 */
	protected static final int COLUMN_REP_ID = 1;

	/** 
	 * Index of column ORG_ID
	 */
	protected static final int COLUMN_ORG_ID = 2;

	/** 
	 * Index of column USER_ID
	 */
	protected static final int COLUMN_USER_ID = 3;

	/** 
	 * Index of column PASSWORD_TEXT
	 */
	protected static final int COLUMN_PASSWORD_TEXT = 4;

	/** 
	 * Number of columns
	 */
	protected static final int NUMBER_OF_COLUMNS = 4;

	/** 
	 * Index of primary-key column REP_ID
	 */
	protected static final int PK_COLUMN_REP_ID = 1;

	/** 
	 * Inserts a new row in the TELESALES_REPS table.
	 */
	public TelesalesRepsPk insert(TelesalesReps dto) throws TelesalesRepsDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			stmt = conn.prepareStatement( "SELECT rep_id_seq.NEXTVAL FROM DUAL" );
			rs = stmt.executeQuery();
			if (rs.next()) {
				dto.setRepId( rs.getLong( 1 ) );
				rs.close();
				stmt.close();
			}
		
			StringBuffer sql = new StringBuffer();
			sql.append( "INSERT INTO " + getTableName() + " (" );
			int modifiedCount = 0;
			if (dto.isRepIdModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
				}
		
				sql.append( "REP_ID" );
				modifiedCount++;
			}
		
			if (dto.isOrgIdModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
				}
		
				sql.append( "ORG_ID" );
				modifiedCount++;
			}
		
			if (dto.isUserIdModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
				}
		
				sql.append( "USER_ID" );
				modifiedCount++;
			}
		
			if (dto.isPasswordTextModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
				}
		
				sql.append( "PASSWORD_TEXT" );
				modifiedCount++;
			}
		
			if (modifiedCount==0) {
				// nothing to insert
				throw new IllegalStateException( "Nothing to insert" );
			}
		
			sql.append( ") VALUES (" );
			for (int i=0; i<modifiedCount; i++ ) {
				if (i>0) {
					sql.append( "," );
				}
		
				sql.append( "?" );
			}
		
			sql.append( ")" );
			stmt = conn.prepareStatement( sql.toString() );
			int index = 1;
			if (dto.isRepIdModified()) {
				stmt.setLong( index++, dto.getRepId() );
			}
		
			if (dto.isOrgIdModified()) {
				stmt.setLong( index++, dto.getOrgId() );
			}
		
			if (dto.isUserIdModified()) {
				stmt.setString( index++, dto.getUserId() );
			}
		
			if (dto.isPasswordTextModified()) {
				stmt.setString( index++, dto.getPasswordText() );
			}
		
			if (logger.isDebugEnabled()) {
				logger.debug( "Executing " + sql.toString() + " with values: " + dto);
			}
		
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			if (logger.isDebugEnabled()) {
				logger.debug( rows + " rows affected (" + (t2-t1) + " ms)");
			}
		
			return dto.createPk();
		}
		catch (Exception _e) {
			logger.error( "Exception: " + _e.getMessage(), _e );
			throw new TelesalesRepsDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Updates a single row in the TELESALES_REPS table.
	 */
	public void update(TelesalesRepsPk pk, TelesalesReps dto) throws TelesalesRepsDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			StringBuffer sql = new StringBuffer();
			sql.append( "UPDATE " + getTableName() + " SET " );
			boolean modified = false;
			if (dto.isRepIdModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "REP_ID=?" );
				modified=true;
			}
		
			if (dto.isOrgIdModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "ORG_ID=?" );
				modified=true;
			}
		
			if (dto.isUserIdModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "USER_ID=?" );
				modified=true;
			}
		
			if (dto.isPasswordTextModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "PASSWORD_TEXT=?" );
				modified=true;
			}
		
			if (!modified) {
				// nothing to update
				return;
			}
		
			sql.append( " WHERE REP_ID=?" );
			if (logger.isDebugEnabled()) {
				logger.debug( "Executing " + sql.toString() + " with values: " + dto);
			}
		
			stmt = conn.prepareStatement( sql.toString() );
			int index = 1;
			if (dto.isRepIdModified()) {
				stmt.setLong( index++, dto.getRepId() );
			}
		
			if (dto.isOrgIdModified()) {
				stmt.setLong( index++, dto.getOrgId() );
			}
		
			if (dto.isUserIdModified()) {
				stmt.setString( index++, dto.getUserId() );
			}
		
			if (dto.isPasswordTextModified()) {
				stmt.setString( index++, dto.getPasswordText() );
			}
		
			stmt.setLong( index++, pk.getRepId() );
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			if (logger.isDebugEnabled()) {
				logger.debug( rows + " rows affected (" + (t2-t1) + " ms)");
			}
		
		}
		catch (Exception _e) {
			logger.error( "Exception: " + _e.getMessage(), _e );
			throw new TelesalesRepsDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Deletes a single row in the TELESALES_REPS table.
	 */
	public void delete(TelesalesRepsPk pk) throws TelesalesRepsDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			if (logger.isDebugEnabled()) {
				logger.debug( "Executing " + SQL_DELETE + " with PK: " + pk);
			}
		
			stmt = conn.prepareStatement( SQL_DELETE );
			stmt.setLong( 1, pk.getRepId() );
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			if (logger.isDebugEnabled()) {
				logger.debug( rows + " rows affected (" + (t2-t1) + " ms)");
			}
		
		}
		catch (Exception _e) {
			logger.error( "Exception: " + _e.getMessage(), _e );
			throw new TelesalesRepsDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns the rows from the TELESALES_REPS table that matches the specified primary-key value.
	 */
	public TelesalesReps findByPrimaryKey(TelesalesRepsPk pk) throws TelesalesRepsDaoException
	{
		return findByPrimaryKey( pk.getRepId() );
	}

	/** 
	 * Returns all rows from the TELESALES_REPS table that match the criteria 'REP_ID = :repId'.
	 */
	public TelesalesReps findByPrimaryKey(long repId) throws TelesalesRepsDaoException
	{
		TelesalesReps ret[] = findByDynamicSelect( SQL_SELECT + " WHERE REP_ID = ?", new Object[] {  new Long(repId) } );
		return ret.length==0 ? null : ret[0];
	}

	/** 
	 * Returns all rows from the TELESALES_REPS table that match the criteria ''.
	 */
	public TelesalesReps[] findAll() throws TelesalesRepsDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " ORDER BY REP_ID", null );
	}

	/** 
	 * Returns all rows from the TELESALES_REPS table that match the criteria 'ORG_ID = :orgId'.
	 */
	public TelesalesReps[] findByTelesalesOrgs(long orgId) throws TelesalesRepsDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ORG_ID = ?", new Object[] {  new Long(orgId) } );
	}

	/** 
	 * Returns all rows from the TELESALES_REPS table that match the criteria 'REP_ID = :repId'.
	 */
	public TelesalesReps[] findWhereRepIdEquals(long repId) throws TelesalesRepsDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE REP_ID = ? ORDER BY REP_ID", new Object[] {  new Long(repId) } );
	}

	/** 
	 * Returns all rows from the TELESALES_REPS table that match the criteria 'ORG_ID = :orgId'.
	 */
	public TelesalesReps[] findWhereOrgIdEquals(long orgId) throws TelesalesRepsDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ORG_ID = ? ORDER BY ORG_ID", new Object[] {  new Long(orgId) } );
	}

	/** 
	 * Returns all rows from the TELESALES_REPS table that match the criteria 'USER_ID = :userId'.
	 */
	public TelesalesReps[] findWhereUserIdEquals(String userId) throws TelesalesRepsDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE USER_ID = ? ORDER BY USER_ID", new Object[] { userId } );
	}

	/** 
	 * Returns all rows from the TELESALES_REPS table that match the criteria 'PASSWORD_TEXT = :passwordText'.
	 */
	public TelesalesReps[] findWherePasswordTextEquals(String passwordText) throws TelesalesRepsDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE PASSWORD_TEXT = ? ORDER BY PASSWORD_TEXT", new Object[] { passwordText } );
	}

	/**
	 * Method 'TelesalesRepsDaoImpl'
	 * 
	 */
	public TelesalesRepsDaoImpl()
	{
	}

	/**
	 * Method 'TelesalesRepsDaoImpl'
	 * 
	 * @param userConn
	 */
	public TelesalesRepsDaoImpl(final java.sql.Connection userConn)
	{
		this.userConn = userConn;
	}

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows)
	{
		this.maxRows = maxRows;
	}

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows()
	{
		return maxRows;
	}

	/**
	 * Method 'getTableName'
	 * 
	 * @return String
	 */
	public String getTableName()
	{
		return "TELESALES_REPS";
	}

	/** 
	 * Fetches a single row from the result set
	 */
	protected TelesalesReps fetchSingleResult(ResultSet rs) throws SQLException
	{
		if (rs.next()) {
			TelesalesReps dto = new TelesalesReps();
			populateDto( dto, rs);
			return dto;
		} else {
			return null;
		}
		
	}

	/** 
	 * Fetches multiple rows from the result set
	 */
	protected TelesalesReps[] fetchMultiResults(ResultSet rs) throws SQLException
	{
		Collection resultList = new ArrayList();
		while (rs.next()) {
			TelesalesReps dto = new TelesalesReps();
			populateDto( dto, rs);
			resultList.add( dto );
		}
		
		TelesalesReps ret[] = new TelesalesReps[ resultList.size() ];
		resultList.toArray( ret );
		return ret;
	}

	/** 
	 * Populates a DTO with data from a ResultSet
	 */
	protected void populateDto(TelesalesReps dto, ResultSet rs) throws SQLException
	{
		dto.setRepId( rs.getLong( COLUMN_REP_ID ) );
		dto.setOrgId( rs.getLong( COLUMN_ORG_ID ) );
		dto.setUserId( rs.getString( COLUMN_USER_ID ) );
		dto.setPasswordText( rs.getString( COLUMN_PASSWORD_TEXT ) );
	}

	/** 
	 * Returns all rows from the TELESALES_REPS table that match the specified arbitrary SQL statement
	 */
	public TelesalesReps[] findByDynamicSelect(String sql, Object[] sqlParams) throws TelesalesRepsDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = sql;
		
		
			if (logger.isDebugEnabled()) {
				logger.debug( "Executing " + SQL);
			}
		
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			logger.error( "Exception: " + _e.getMessage(), _e );
			throw new TelesalesRepsDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns all rows from the TELESALES_REPS table that match the specified arbitrary SQL statement
	 */
	public TelesalesReps[] findByDynamicWhere(String sql, Object[] sqlParams) throws TelesalesRepsDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = SQL_SELECT + " WHERE " + sql;
		
		
			if (logger.isDebugEnabled()) {
				logger.debug( "Executing " + SQL);
			}
		
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			logger.error( "Exception: " + _e.getMessage(), _e );
			throw new TelesalesRepsDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

}
