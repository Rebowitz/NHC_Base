/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package com.nhcsys.dataaccess.j2ee.session;

import com.nhcsys.dataaccess.factory.*;
import com.nhcsys.dataaccess.dao.*;
import com.nhcsys.dataaccess.dto.*;
import com.nhcsys.dataaccess.exceptions.*;
import java.rmi.RemoteException;
import java.math.*;
import java.util.Date;
import javax.ejb.*;
import org.apache.log4j.Logger;

public class InstalledSoftwareSessionBean implements SessionBean
{
	private InstalledSoftwareDao daoImpl = createDao();

	protected static final Logger logger = Logger.getLogger( InstalledSoftwareSessionBean.class );

	/** 
	 * Inserts a new row in the INSTALLED_SOFTWARE table.
	 */
	public InstalledSoftwarePk insert(InstalledSoftware dto) throws InstalledSoftwareDaoException
	{
		try {
			return daoImpl.insert(dto);
		}
		catch (InstalledSoftwareDaoException daoException) {
			throw daoException;
		}
		catch (Exception ex) {
			logger.error( ex);
			throw new InstalledSoftwareDaoException( ex.getMessage() );
		}
		
	}

	/** 
	 * Updates a single row in the INSTALLED_SOFTWARE table.
	 */
	public void update(InstalledSoftwarePk pk, InstalledSoftware dto) throws InstalledSoftwareDaoException
	{
		try {
			daoImpl.update(pk, dto);
		}
		catch (InstalledSoftwareDaoException daoException) {
			throw daoException;
		}
		catch (Exception ex) {
			logger.error( ex);
			throw new InstalledSoftwareDaoException( ex.getMessage() );
		}
		
	}

	/** 
	 * Deletes a single row in the INSTALLED_SOFTWARE table.
	 */
	public void delete(InstalledSoftwarePk pk) throws InstalledSoftwareDaoException
	{
		try {
			daoImpl.delete(pk);
		}
		catch (InstalledSoftwareDaoException daoException) {
			throw daoException;
		}
		catch (Exception ex) {
			logger.error( ex);
			throw new InstalledSoftwareDaoException( ex.getMessage() );
		}
		
	}

	/** 
	 * Returns the rows from the INSTALLED_SOFTWARE table that matches the specified primary-key value.
	 */
	public InstalledSoftware findByPrimaryKey(InstalledSoftwarePk pk) throws InstalledSoftwareDaoException
	{
		return findByPrimaryKey( pk.getSoftwareId() );
	}

	/**
	 * Method 'findByPrimaryKey'
	 * 
	 * @param softwareId
	 * @throws InstalledSoftwareDaoException
	 * @return InstalledSoftware
	 */
	public InstalledSoftware findByPrimaryKey(long softwareId) throws InstalledSoftwareDaoException
	{
		try {
			return daoImpl.findByPrimaryKey(softwareId);
		}
		catch (InstalledSoftwareDaoException daoException) {
			throw daoException;
		}
		catch (Exception ex) {
			logger.error( ex);
			throw new InstalledSoftwareDaoException( ex.getMessage() );
		}
		
	}

	/**
	 * Method 'findWhereSessionIdEquals'
	 * 
	 * @param sessionId
	 * @throws InstalledSoftwareDaoException
	 * @return InstalledSoftware[]
	 */
	public InstalledSoftware[] findWhereSessionIdEquals(String sessionId) throws InstalledSoftwareDaoException
	{
		try {
			return daoImpl.findWhereSessionIdEquals(sessionId);
		}
		catch (InstalledSoftwareDaoException daoException) {
			throw daoException;
		}
		catch (Exception ex) {
			logger.error( ex);
			throw new InstalledSoftwareDaoException( ex.getMessage() );
		}
		
	}

	/**
	 * Method 'findAll'
	 * 
	 * @throws InstalledSoftwareDaoException
	 * @return InstalledSoftware[]
	 */
	public InstalledSoftware[] findAll() throws InstalledSoftwareDaoException
	{
		try {
			return daoImpl.findAll();
		}
		catch (InstalledSoftwareDaoException daoException) {
			throw daoException;
		}
		catch (Exception ex) {
			logger.error( ex);
			throw new InstalledSoftwareDaoException( ex.getMessage() );
		}
		
	}

	/**
	 * Method 'findWhereSoftwareIdEquals'
	 * 
	 * @param softwareId
	 * @throws InstalledSoftwareDaoException
	 * @return InstalledSoftware[]
	 */
	public InstalledSoftware[] findWhereSoftwareIdEquals(long softwareId) throws InstalledSoftwareDaoException
	{
		try {
			return daoImpl.findWhereSoftwareIdEquals(softwareId);
		}
		catch (InstalledSoftwareDaoException daoException) {
			throw daoException;
		}
		catch (Exception ex) {
			logger.error( ex);
			throw new InstalledSoftwareDaoException( ex.getMessage() );
		}
		
	}

	/**
	 * Method 'findWhereCustomerIdEquals'
	 * 
	 * @param customerId
	 * @throws InstalledSoftwareDaoException
	 * @return InstalledSoftware[]
	 */
	public InstalledSoftware[] findWhereCustomerIdEquals(long customerId) throws InstalledSoftwareDaoException
	{
		try {
			return daoImpl.findWhereCustomerIdEquals(customerId);
		}
		catch (InstalledSoftwareDaoException daoException) {
			throw daoException;
		}
		catch (Exception ex) {
			logger.error( ex);
			throw new InstalledSoftwareDaoException( ex.getMessage() );
		}
		
	}

	/**
	 * Method 'findWhereMachineIdEquals'
	 * 
	 * @param machineId
	 * @throws InstalledSoftwareDaoException
	 * @return InstalledSoftware[]
	 */
	public InstalledSoftware[] findWhereMachineIdEquals(long machineId) throws InstalledSoftwareDaoException
	{
		try {
			return daoImpl.findWhereMachineIdEquals(machineId);
		}
		catch (InstalledSoftwareDaoException daoException) {
			throw daoException;
		}
		catch (Exception ex) {
			logger.error( ex);
			throw new InstalledSoftwareDaoException( ex.getMessage() );
		}
		
	}

	/**
	 * Method 'findWhereProductKeyEquals'
	 * 
	 * @param productKey
	 * @throws InstalledSoftwareDaoException
	 * @return InstalledSoftware[]
	 */
	public InstalledSoftware[] findWhereProductKeyEquals(String productKey) throws InstalledSoftwareDaoException
	{
		try {
			return daoImpl.findWhereProductKeyEquals(productKey);
		}
		catch (InstalledSoftwareDaoException daoException) {
			throw daoException;
		}
		catch (Exception ex) {
			logger.error( ex);
			throw new InstalledSoftwareDaoException( ex.getMessage() );
		}
		
	}

	/**
	 * Method 'findWhereProductNameEquals'
	 * 
	 * @param productName
	 * @throws InstalledSoftwareDaoException
	 * @return InstalledSoftware[]
	 */
	public InstalledSoftware[] findWhereProductNameEquals(String productName) throws InstalledSoftwareDaoException
	{
		try {
			return daoImpl.findWhereProductNameEquals(productName);
		}
		catch (InstalledSoftwareDaoException daoException) {
			throw daoException;
		}
		catch (Exception ex) {
			logger.error( ex);
			throw new InstalledSoftwareDaoException( ex.getMessage() );
		}
		
	}

	/**
	 * Method 'findWhereCompanyNameEquals'
	 * 
	 * @param companyName
	 * @throws InstalledSoftwareDaoException
	 * @return InstalledSoftware[]
	 */
	public InstalledSoftware[] findWhereCompanyNameEquals(String companyName) throws InstalledSoftwareDaoException
	{
		try {
			return daoImpl.findWhereCompanyNameEquals(companyName);
		}
		catch (InstalledSoftwareDaoException daoException) {
			throw daoException;
		}
		catch (Exception ex) {
			logger.error( ex);
			throw new InstalledSoftwareDaoException( ex.getMessage() );
		}
		
	}

	/**
	 * Method 'findWhereProductVersionEquals'
	 * 
	 * @param productVersion
	 * @throws InstalledSoftwareDaoException
	 * @return InstalledSoftware[]
	 */
	public InstalledSoftware[] findWhereProductVersionEquals(String productVersion) throws InstalledSoftwareDaoException
	{
		try {
			return daoImpl.findWhereProductVersionEquals(productVersion);
		}
		catch (InstalledSoftwareDaoException daoException) {
			throw daoException;
		}
		catch (Exception ex) {
			logger.error( ex);
			throw new InstalledSoftwareDaoException( ex.getMessage() );
		}
		
	}

	/**
	 * Method 'findByDynamicSelect'
	 * 
	 * @param sql
	 * @param arg
	 * @throws InstalledSoftwareDaoException
	 * @return InstalledSoftware[]
	 */
	public InstalledSoftware[] findByDynamicSelect(String sql, Object[] arg) throws InstalledSoftwareDaoException
	{
		try {
			return daoImpl.findByDynamicSelect(sql, arg);
		}
		catch (InstalledSoftwareDaoException daoException) {
			throw daoException;
		}
		catch (Exception ex) {
			logger.error( ex);
			throw new InstalledSoftwareDaoException( ex.getMessage() );
		}
		
	}

	/**
	 * Method 'findByDynamicWhere'
	 * 
	 * @param sql
	 * @param arg
	 * @throws InstalledSoftwareDaoException
	 * @return InstalledSoftware[]
	 */
	public InstalledSoftware[] findByDynamicWhere(String sql, Object[] arg) throws InstalledSoftwareDaoException
	{
		try {
			return daoImpl.findByDynamicWhere(sql, arg);
		}
		catch (InstalledSoftwareDaoException daoException) {
			throw daoException;
		}
		catch (Exception ex) {
			logger.error( ex);
			throw new InstalledSoftwareDaoException( ex.getMessage() );
		}
		
	}

	/**
	 * Method 'ejbActivate'
	 * 
	 */
	public void ejbActivate()
	{
	}

	/**
	 * Method 'ejbPassivate'
	 * 
	 */
	public void ejbPassivate()
	{
	}

	/**
	 * Method 'ejbCreate'
	 * 
	 */
	public void ejbCreate()
	{
	}

	/**
	 * Method 'ejbRemove'
	 * 
	 */
	public void ejbRemove()
	{
	}

	/**
	 * Method 'setSessionContext'
	 * 
	 * @param ctx
	 */
	public void setSessionContext(SessionContext ctx)
	{
	}

	/**
	 * Method 'unsetSessionContext'
	 * 
	 */
	public void unsetSessionContext()
	{
	}

	/**
	 * Method 'createDao'
	 * 
	 * @return InstalledSoftwareDao
	 */
	private InstalledSoftwareDao createDao()
	{
		return InstalledSoftwareDaoFactory.create();
	}

}
