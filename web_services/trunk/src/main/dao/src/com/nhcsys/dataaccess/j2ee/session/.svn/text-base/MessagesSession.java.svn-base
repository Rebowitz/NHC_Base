/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package com.nhcsys.dataaccess.j2ee.session;

import com.nhcsys.dataaccess.factory.*;
import com.nhcsys.dataaccess.dao.*;
import com.nhcsys.dataaccess.dto.*;
import com.nhcsys.dataaccess.exceptions.*;
import java.rmi.RemoteException;
import java.math.*;
import java.util.Date;
import javax.ejb.*;

public interface MessagesSession extends EJBObject
{
	/** 
	 * Inserts a new row in the MESSAGES table.
	 */
	public MessagesPk insert(Messages dto) throws MessagesDaoException, RemoteException;

	/** 
	 * Updates a single row in the MESSAGES table.
	 */
	public void update(MessagesPk pk, Messages dto) throws MessagesDaoException, RemoteException;

	/** 
	 * Deletes a single row in the MESSAGES table.
	 */
	public void delete(MessagesPk pk) throws MessagesDaoException, RemoteException;

	/** 
	 * Returns the rows from the MESSAGES table that matches the specified primary-key value.
	 */
	public Messages findByPrimaryKey(MessagesPk pk) throws MessagesDaoException, RemoteException;

	/**
	 * Method 'findByPrimaryKey'
	 * 
	 * @param messageId
	 * @throws MessagesDaoException
	 * @throws RemoteException
	 * @return Messages
	 */
	public Messages findByPrimaryKey(long messageId) throws MessagesDaoException, RemoteException;

	/**
	 * Method 'findAll'
	 * 
	 * @throws MessagesDaoException
	 * @throws RemoteException
	 * @return Messages[]
	 */
	public Messages[] findAll() throws MessagesDaoException, RemoteException;

	/**
	 * Method 'findWhereMessageIdEquals'
	 * 
	 * @param messageId
	 * @throws MessagesDaoException
	 * @throws RemoteException
	 * @return Messages[]
	 */
	public Messages[] findWhereMessageIdEquals(long messageId) throws MessagesDaoException, RemoteException;

	/**
	 * Method 'findWhereTypeEquals'
	 * 
	 * @param type
	 * @throws MessagesDaoException
	 * @throws RemoteException
	 * @return Messages[]
	 */
	public Messages[] findWhereTypeEquals(String type) throws MessagesDaoException, RemoteException;

	/**
	 * Method 'findWhereStartTimeEquals'
	 * 
	 * @param startTime
	 * @throws MessagesDaoException
	 * @throws RemoteException
	 * @return Messages[]
	 */
	public Messages[] findWhereStartTimeEquals(Date startTime) throws MessagesDaoException, RemoteException;

	/**
	 * Method 'findWhereEndTimeEquals'
	 * 
	 * @param endTime
	 * @throws MessagesDaoException
	 * @throws RemoteException
	 * @return Messages[]
	 */
	public Messages[] findWhereEndTimeEquals(Date endTime) throws MessagesDaoException, RemoteException;

	/**
	 * Method 'findWhereModTimeEquals'
	 * 
	 * @param modTime
	 * @throws MessagesDaoException
	 * @throws RemoteException
	 * @return Messages[]
	 */
	public Messages[] findWhereModTimeEquals(Date modTime) throws MessagesDaoException, RemoteException;

	/**
	 * Method 'findWhereTitleEquals'
	 * 
	 * @param title
	 * @throws MessagesDaoException
	 * @throws RemoteException
	 * @return Messages[]
	 */
	public Messages[] findWhereTitleEquals(String title) throws MessagesDaoException, RemoteException;

	/**
	 * Method 'findWhereContentsEquals'
	 * 
	 * @param contents
	 * @throws MessagesDaoException
	 * @throws RemoteException
	 * @return Messages[]
	 */
	public Messages[] findWhereContentsEquals(String contents) throws MessagesDaoException, RemoteException;

	/**
	 * Method 'findWhereSummaryEquals'
	 * 
	 * @param summary
	 * @throws MessagesDaoException
	 * @throws RemoteException
	 * @return Messages[]
	 */
	public Messages[] findWhereSummaryEquals(String summary) throws MessagesDaoException, RemoteException;

	/**
	 * Method 'findWherePriorityEquals'
	 * 
	 * @param priority
	 * @throws MessagesDaoException
	 * @throws RemoteException
	 * @return Messages[]
	 */
	public Messages[] findWherePriorityEquals(String priority) throws MessagesDaoException, RemoteException;

	/**
	 * Method 'findWherePopupDurationEquals'
	 * 
	 * @param popupDuration
	 * @throws MessagesDaoException
	 * @throws RemoteException
	 * @return Messages[]
	 */
	public Messages[] findWherePopupDurationEquals(long popupDuration) throws MessagesDaoException, RemoteException;

	/**
	 * Method 'findWhereClickDestinationUrlEquals'
	 * 
	 * @param clickDestinationUrl
	 * @throws MessagesDaoException
	 * @throws RemoteException
	 * @return Messages[]
	 */
	public Messages[] findWhereClickDestinationUrlEquals(String clickDestinationUrl) throws MessagesDaoException, RemoteException;

	/**
	 * Method 'findWhereDestinationEquals'
	 * 
	 * @param destination
	 * @throws MessagesDaoException
	 * @throws RemoteException
	 * @return Messages[]
	 */
	public Messages[] findWhereDestinationEquals(String destination) throws MessagesDaoException, RemoteException;

	/**
	 * Method 'findWhereGroupNameEquals'
	 * 
	 * @param groupName
	 * @throws MessagesDaoException
	 * @throws RemoteException
	 * @return Messages[]
	 */
	public Messages[] findWhereGroupNameEquals(String groupName) throws MessagesDaoException, RemoteException;

	/**
	 * Method 'findWhereViveIdEquals'
	 * 
	 * @param viveId
	 * @throws MessagesDaoException
	 * @throws RemoteException
	 * @return Messages[]
	 */
	public Messages[] findWhereViveIdEquals(String viveId) throws MessagesDaoException, RemoteException;

	/**
	 * Method 'findByDynamicSelect'
	 * 
	 * @param sql
	 * @param arg
	 * @throws MessagesDaoException
	 * @throws RemoteException
	 * @return Messages[]
	 */
	public Messages[] findByDynamicSelect(String sql, Object[] arg) throws MessagesDaoException, RemoteException;

	/**
	 * Method 'findByDynamicWhere'
	 * 
	 * @param sql
	 * @param arg
	 * @throws MessagesDaoException
	 * @throws RemoteException
	 * @return Messages[]
	 */
	public Messages[] findByDynamicWhere(String sql, Object[] arg) throws MessagesDaoException, RemoteException;

}
