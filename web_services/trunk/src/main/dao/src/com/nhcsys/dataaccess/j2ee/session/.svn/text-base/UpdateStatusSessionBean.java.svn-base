/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package com.nhcsys.dataaccess.j2ee.session;

import com.nhcsys.dataaccess.factory.*;
import com.nhcsys.dataaccess.dao.*;
import com.nhcsys.dataaccess.dto.*;
import com.nhcsys.dataaccess.exceptions.*;
import java.rmi.RemoteException;
import java.math.*;
import java.util.Date;
import javax.ejb.*;
import org.apache.log4j.Logger;

public class UpdateStatusSessionBean implements SessionBean
{
	private UpdateStatusDao daoImpl = createDao();

	protected static final Logger logger = Logger.getLogger( UpdateStatusSessionBean.class );

	/** 
	 * Inserts a new row in the UPDATE_STATUS table.
	 */
	public UpdateStatusPk insert(UpdateStatus dto) throws UpdateStatusDaoException
	{
		try {
			return daoImpl.insert(dto);
		}
		catch (UpdateStatusDaoException daoException) {
			throw daoException;
		}
		catch (Exception ex) {
			logger.error( ex);
			throw new UpdateStatusDaoException( ex.getMessage() );
		}
		
	}

	/** 
	 * Updates a single row in the UPDATE_STATUS table.
	 */
	public void update(UpdateStatusPk pk, UpdateStatus dto) throws UpdateStatusDaoException
	{
		try {
			daoImpl.update(pk, dto);
		}
		catch (UpdateStatusDaoException daoException) {
			throw daoException;
		}
		catch (Exception ex) {
			logger.error( ex);
			throw new UpdateStatusDaoException( ex.getMessage() );
		}
		
	}

	/** 
	 * Deletes a single row in the UPDATE_STATUS table.
	 */
	public void delete(UpdateStatusPk pk) throws UpdateStatusDaoException
	{
		try {
			daoImpl.delete(pk);
		}
		catch (UpdateStatusDaoException daoException) {
			throw daoException;
		}
		catch (Exception ex) {
			logger.error( ex);
			throw new UpdateStatusDaoException( ex.getMessage() );
		}
		
	}

	/** 
	 * Returns the rows from the UPDATE_STATUS table that matches the specified primary-key value.
	 */
	public UpdateStatus findByPrimaryKey(UpdateStatusPk pk) throws UpdateStatusDaoException
	{
		return findByPrimaryKey( pk.getUpdateStatusId() );
	}

	/**
	 * Method 'findByPrimaryKey'
	 * 
	 * @param updateStatusId
	 * @throws UpdateStatusDaoException
	 * @return UpdateStatus
	 */
	public UpdateStatus findByPrimaryKey(long updateStatusId) throws UpdateStatusDaoException
	{
		try {
			return daoImpl.findByPrimaryKey(updateStatusId);
		}
		catch (UpdateStatusDaoException daoException) {
			throw daoException;
		}
		catch (Exception ex) {
			logger.error( ex);
			throw new UpdateStatusDaoException( ex.getMessage() );
		}
		
	}

	/**
	 * Method 'findAll'
	 * 
	 * @throws UpdateStatusDaoException
	 * @return UpdateStatus[]
	 */
	public UpdateStatus[] findAll() throws UpdateStatusDaoException
	{
		try {
			return daoImpl.findAll();
		}
		catch (UpdateStatusDaoException daoException) {
			throw daoException;
		}
		catch (Exception ex) {
			logger.error( ex);
			throw new UpdateStatusDaoException( ex.getMessage() );
		}
		
	}

	/**
	 * Method 'findWhereUpdateStatusIdEquals'
	 * 
	 * @param updateStatusId
	 * @throws UpdateStatusDaoException
	 * @return UpdateStatus[]
	 */
	public UpdateStatus[] findWhereUpdateStatusIdEquals(long updateStatusId) throws UpdateStatusDaoException
	{
		try {
			return daoImpl.findWhereUpdateStatusIdEquals(updateStatusId);
		}
		catch (UpdateStatusDaoException daoException) {
			throw daoException;
		}
		catch (Exception ex) {
			logger.error( ex);
			throw new UpdateStatusDaoException( ex.getMessage() );
		}
		
	}

	/**
	 * Method 'findWhereSessionIdEquals'
	 * 
	 * @param sessionId
	 * @throws UpdateStatusDaoException
	 * @return UpdateStatus[]
	 */
	public UpdateStatus[] findWhereSessionIdEquals(String sessionId) throws UpdateStatusDaoException
	{
		try {
			return daoImpl.findWhereSessionIdEquals(sessionId);
		}
		catch (UpdateStatusDaoException daoException) {
			throw daoException;
		}
		catch (Exception ex) {
			logger.error( ex);
			throw new UpdateStatusDaoException( ex.getMessage() );
		}
		
	}

	/**
	 * Method 'findWhereMachineIdEquals'
	 * 
	 * @param machineId
	 * @throws UpdateStatusDaoException
	 * @return UpdateStatus[]
	 */
	public UpdateStatus[] findWhereMachineIdEquals(long machineId) throws UpdateStatusDaoException
	{
		try {
			return daoImpl.findWhereMachineIdEquals(machineId);
		}
		catch (UpdateStatusDaoException daoException) {
			throw daoException;
		}
		catch (Exception ex) {
			logger.error( ex);
			throw new UpdateStatusDaoException( ex.getMessage() );
		}
		
	}

	/**
	 * Method 'findWhereProductIdEquals'
	 * 
	 * @param productId
	 * @throws UpdateStatusDaoException
	 * @return UpdateStatus[]
	 */
	public UpdateStatus[] findWhereProductIdEquals(String productId) throws UpdateStatusDaoException
	{
		try {
			return daoImpl.findWhereProductIdEquals(productId);
		}
		catch (UpdateStatusDaoException daoException) {
			throw daoException;
		}
		catch (Exception ex) {
			logger.error( ex);
			throw new UpdateStatusDaoException( ex.getMessage() );
		}
		
	}

	/**
	 * Method 'findWhereDescriptionEquals'
	 * 
	 * @param description
	 * @throws UpdateStatusDaoException
	 * @return UpdateStatus[]
	 */
	public UpdateStatus[] findWhereDescriptionEquals(String description) throws UpdateStatusDaoException
	{
		try {
			return daoImpl.findWhereDescriptionEquals(description);
		}
		catch (UpdateStatusDaoException daoException) {
			throw daoException;
		}
		catch (Exception ex) {
			logger.error( ex);
			throw new UpdateStatusDaoException( ex.getMessage() );
		}
		
	}

	/**
	 * Method 'findWhereReportEquals'
	 * 
	 * @param report
	 * @throws UpdateStatusDaoException
	 * @return UpdateStatus[]
	 */
	public UpdateStatus[] findWhereReportEquals(String report) throws UpdateStatusDaoException
	{
		try {
			return daoImpl.findWhereReportEquals(report);
		}
		catch (UpdateStatusDaoException daoException) {
			throw daoException;
		}
		catch (Exception ex) {
			logger.error( ex);
			throw new UpdateStatusDaoException( ex.getMessage() );
		}
		
	}

	/**
	 * Method 'findWhereStatusEquals'
	 * 
	 * @param status
	 * @throws UpdateStatusDaoException
	 * @return UpdateStatus[]
	 */
	public UpdateStatus[] findWhereStatusEquals(String status) throws UpdateStatusDaoException
	{
		try {
			return daoImpl.findWhereStatusEquals(status);
		}
		catch (UpdateStatusDaoException daoException) {
			throw daoException;
		}
		catch (Exception ex) {
			logger.error( ex);
			throw new UpdateStatusDaoException( ex.getMessage() );
		}
		
	}

	/**
	 * Method 'findByDynamicSelect'
	 * 
	 * @param sql
	 * @param arg
	 * @throws UpdateStatusDaoException
	 * @return UpdateStatus[]
	 */
	public UpdateStatus[] findByDynamicSelect(String sql, Object[] arg) throws UpdateStatusDaoException
	{
		try {
			return daoImpl.findByDynamicSelect(sql, arg);
		}
		catch (UpdateStatusDaoException daoException) {
			throw daoException;
		}
		catch (Exception ex) {
			logger.error( ex);
			throw new UpdateStatusDaoException( ex.getMessage() );
		}
		
	}

	/**
	 * Method 'findByDynamicWhere'
	 * 
	 * @param sql
	 * @param arg
	 * @throws UpdateStatusDaoException
	 * @return UpdateStatus[]
	 */
	public UpdateStatus[] findByDynamicWhere(String sql, Object[] arg) throws UpdateStatusDaoException
	{
		try {
			return daoImpl.findByDynamicWhere(sql, arg);
		}
		catch (UpdateStatusDaoException daoException) {
			throw daoException;
		}
		catch (Exception ex) {
			logger.error( ex);
			throw new UpdateStatusDaoException( ex.getMessage() );
		}
		
	}

	/**
	 * Method 'ejbActivate'
	 * 
	 */
	public void ejbActivate()
	{
	}

	/**
	 * Method 'ejbPassivate'
	 * 
	 */
	public void ejbPassivate()
	{
	}

	/**
	 * Method 'ejbCreate'
	 * 
	 */
	public void ejbCreate()
	{
	}

	/**
	 * Method 'ejbRemove'
	 * 
	 */
	public void ejbRemove()
	{
	}

	/**
	 * Method 'setSessionContext'
	 * 
	 * @param ctx
	 */
	public void setSessionContext(SessionContext ctx)
	{
	}

	/**
	 * Method 'unsetSessionContext'
	 * 
	 */
	public void unsetSessionContext()
	{
	}

	/**
	 * Method 'createDao'
	 * 
	 * @return UpdateStatusDao
	 */
	private UpdateStatusDao createDao()
	{
		return UpdateStatusDaoFactory.create();
	}

}
