/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package com.nhcsys.dataaccess.dao;

import com.nhcsys.dataaccess.dto.*;
import com.nhcsys.dataaccess.exceptions.*;

public interface TelesalesCallSourceDao
{
	/** 
	 * Inserts a new row in the TELESALES_CALL_SOURCE table.
	 */
	public TelesalesCallSourcePk insert(TelesalesCallSource dto) throws TelesalesCallSourceDaoException;

	/** 
	 * Updates a single row in the TELESALES_CALL_SOURCE table.
	 */
	public void update(TelesalesCallSourcePk pk, TelesalesCallSource dto) throws TelesalesCallSourceDaoException;

	/** 
	 * Deletes a single row in the TELESALES_CALL_SOURCE table.
	 */
	public void delete(TelesalesCallSourcePk pk) throws TelesalesCallSourceDaoException;

	/** 
	 * Returns the rows from the TELESALES_CALL_SOURCE table that matches the specified primary-key value.
	 */
	public TelesalesCallSource findByPrimaryKey(TelesalesCallSourcePk pk) throws TelesalesCallSourceDaoException;

	/** 
	 * Returns all rows from the TELESALES_CALL_SOURCE table that match the criteria 'SOURCE_ID = :sourceId'.
	 */
	public TelesalesCallSource findByPrimaryKey(long sourceId) throws TelesalesCallSourceDaoException;

	/** 
	 * Returns all rows from the TELESALES_CALL_SOURCE table that match the criteria ''.
	 */
	public TelesalesCallSource[] findAll() throws TelesalesCallSourceDaoException;

	/** 
	 * Returns all rows from the TELESALES_CALL_SOURCE table that match the criteria 'SOURCE_ID = :sourceId'.
	 */
	public TelesalesCallSource[] findWhereSourceIdEquals(long sourceId) throws TelesalesCallSourceDaoException;

	/** 
	 * Returns all rows from the TELESALES_CALL_SOURCE table that match the criteria 'SOURCE_DESC = :sourceDesc'.
	 */
	public TelesalesCallSource[] findWhereSourceDescEquals(String sourceDesc) throws TelesalesCallSourceDaoException;

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows);

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows();

	/** 
	 * Returns all rows from the TELESALES_CALL_SOURCE table that match the specified arbitrary SQL statement
	 */
	public TelesalesCallSource[] findByDynamicSelect(String sql, Object[] sqlParams) throws TelesalesCallSourceDaoException;

	/** 
	 * Returns all rows from the TELESALES_CALL_SOURCE table that match the specified arbitrary SQL statement
	 */
	public TelesalesCallSource[] findByDynamicWhere(String sql, Object[] sqlParams) throws TelesalesCallSourceDaoException;

}
