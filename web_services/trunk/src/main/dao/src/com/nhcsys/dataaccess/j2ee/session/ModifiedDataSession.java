/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package com.nhcsys.dataaccess.j2ee.session;

import com.nhcsys.dataaccess.factory.*;
import com.nhcsys.dataaccess.dao.*;
import com.nhcsys.dataaccess.dto.*;
import com.nhcsys.dataaccess.exceptions.*;
import java.rmi.RemoteException;
import java.math.*;
import java.util.Date;
import javax.ejb.*;

public interface ModifiedDataSession extends EJBObject
{
	/** 
	 * Inserts a new row in the MODIFIED_DATA table.
	 */
	public ModifiedDataPk insert(ModifiedData dto) throws ModifiedDataDaoException, RemoteException;

	/** 
	 * Updates a single row in the MODIFIED_DATA table.
	 */
	public void update(ModifiedDataPk pk, ModifiedData dto) throws ModifiedDataDaoException, RemoteException;

	/** 
	 * Deletes a single row in the MODIFIED_DATA table.
	 */
	public void delete(ModifiedDataPk pk) throws ModifiedDataDaoException, RemoteException;

	/** 
	 * Returns the rows from the MODIFIED_DATA table that matches the specified primary-key value.
	 */
	public ModifiedData findByPrimaryKey(ModifiedDataPk pk) throws ModifiedDataDaoException, RemoteException;

	/**
	 * Method 'findByPrimaryKey'
	 * 
	 * @param modifiedDataId
	 * @throws ModifiedDataDaoException
	 * @throws RemoteException
	 * @return ModifiedData
	 */
	public ModifiedData findByPrimaryKey(long modifiedDataId) throws ModifiedDataDaoException, RemoteException;

	/**
	 * Method 'findAll'
	 * 
	 * @throws ModifiedDataDaoException
	 * @throws RemoteException
	 * @return ModifiedData[]
	 */
	public ModifiedData[] findAll() throws ModifiedDataDaoException, RemoteException;

	/**
	 * Method 'findWhereModifiedDataIdEquals'
	 * 
	 * @param modifiedDataId
	 * @throws ModifiedDataDaoException
	 * @throws RemoteException
	 * @return ModifiedData[]
	 */
	public ModifiedData[] findWhereModifiedDataIdEquals(long modifiedDataId) throws ModifiedDataDaoException, RemoteException;

	/**
	 * Method 'findWhereCustomerIdEquals'
	 * 
	 * @param customerId
	 * @throws ModifiedDataDaoException
	 * @throws RemoteException
	 * @return ModifiedData[]
	 */
	public ModifiedData[] findWhereCustomerIdEquals(long customerId) throws ModifiedDataDaoException, RemoteException;

	/**
	 * Method 'findWhereModifiedTimeEquals'
	 * 
	 * @param modifiedTime
	 * @throws ModifiedDataDaoException
	 * @throws RemoteException
	 * @return ModifiedData[]
	 */
	public ModifiedData[] findWhereModifiedTimeEquals(Date modifiedTime) throws ModifiedDataDaoException, RemoteException;

	/**
	 * Method 'findByDynamicSelect'
	 * 
	 * @param sql
	 * @param arg
	 * @throws ModifiedDataDaoException
	 * @throws RemoteException
	 * @return ModifiedData[]
	 */
	public ModifiedData[] findByDynamicSelect(String sql, Object[] arg) throws ModifiedDataDaoException, RemoteException;

	/**
	 * Method 'findByDynamicWhere'
	 * 
	 * @param sql
	 * @param arg
	 * @throws ModifiedDataDaoException
	 * @throws RemoteException
	 * @return ModifiedData[]
	 */
	public ModifiedData[] findByDynamicWhere(String sql, Object[] arg) throws ModifiedDataDaoException, RemoteException;

}
