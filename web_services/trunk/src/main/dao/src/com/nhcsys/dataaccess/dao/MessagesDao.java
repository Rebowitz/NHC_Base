/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package com.nhcsys.dataaccess.dao;

import java.util.Date;
import com.nhcsys.dataaccess.dto.*;
import com.nhcsys.dataaccess.exceptions.*;

public interface MessagesDao
{
	/** 
	 * Inserts a new row in the MESSAGES table.
	 */
	public MessagesPk insert(Messages dto) throws MessagesDaoException;

	/** 
	 * Updates a single row in the MESSAGES table.
	 */
	public void update(MessagesPk pk, Messages dto) throws MessagesDaoException;

	/** 
	 * Deletes a single row in the MESSAGES table.
	 */
	public void delete(MessagesPk pk) throws MessagesDaoException;

	/** 
	 * Returns the rows from the MESSAGES table that matches the specified primary-key value.
	 */
	public Messages findByPrimaryKey(MessagesPk pk) throws MessagesDaoException;

	/** 
	 * Returns all rows from the MESSAGES table that match the criteria 'MESSAGE_ID = :messageId'.
	 */
	public Messages findByPrimaryKey(long messageId) throws MessagesDaoException;

	/** 
	 * Returns all rows from the MESSAGES table that match the criteria ''.
	 */
	public Messages[] findAll() throws MessagesDaoException;

	/** 
	 * Returns all rows from the MESSAGES table that match the criteria 'MESSAGE_ID = :messageId'.
	 */
	public Messages[] findWhereMessageIdEquals(long messageId) throws MessagesDaoException;

	/** 
	 * Returns all rows from the MESSAGES table that match the criteria 'TYPE = :type'.
	 */
	public Messages[] findWhereTypeEquals(String type) throws MessagesDaoException;

	/** 
	 * Returns all rows from the MESSAGES table that match the criteria 'START_TIME = :startTime'.
	 */
	public Messages[] findWhereStartTimeEquals(Date startTime) throws MessagesDaoException;

	/** 
	 * Returns all rows from the MESSAGES table that match the criteria 'END_TIME = :endTime'.
	 */
	public Messages[] findWhereEndTimeEquals(Date endTime) throws MessagesDaoException;

	/** 
	 * Returns all rows from the MESSAGES table that match the criteria 'MOD_TIME = :modTime'.
	 */
	public Messages[] findWhereModTimeEquals(Date modTime) throws MessagesDaoException;

	/** 
	 * Returns all rows from the MESSAGES table that match the criteria 'TITLE = :title'.
	 */
	public Messages[] findWhereTitleEquals(String title) throws MessagesDaoException;

	/** 
	 * Returns all rows from the MESSAGES table that match the criteria 'CONTENTS = :contents'.
	 */
	public Messages[] findWhereContentsEquals(String contents) throws MessagesDaoException;

	/** 
	 * Returns all rows from the MESSAGES table that match the criteria 'SUMMARY = :summary'.
	 */
	public Messages[] findWhereSummaryEquals(String summary) throws MessagesDaoException;

	/** 
	 * Returns all rows from the MESSAGES table that match the criteria 'PRIORITY = :priority'.
	 */
	public Messages[] findWherePriorityEquals(String priority) throws MessagesDaoException;

	/** 
	 * Returns all rows from the MESSAGES table that match the criteria 'POPUP_DURATION = :popupDuration'.
	 */
	public Messages[] findWherePopupDurationEquals(long popupDuration) throws MessagesDaoException;

	/** 
	 * Returns all rows from the MESSAGES table that match the criteria 'CLICK_DESTINATION_URL = :clickDestinationUrl'.
	 */
	public Messages[] findWhereClickDestinationUrlEquals(String clickDestinationUrl) throws MessagesDaoException;

	/** 
	 * Returns all rows from the MESSAGES table that match the criteria 'DESTINATION = :destination'.
	 */
	public Messages[] findWhereDestinationEquals(String destination) throws MessagesDaoException;

	/** 
	 * Returns all rows from the MESSAGES table that match the criteria 'GROUP_NAME = :groupName'.
	 */
	public Messages[] findWhereGroupNameEquals(String groupName) throws MessagesDaoException;

	/** 
	 * Returns all rows from the MESSAGES table that match the criteria 'VIVE_ID = :viveId'.
	 */
	public Messages[] findWhereViveIdEquals(String viveId) throws MessagesDaoException;

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows);

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows();

	/** 
	 * Returns all rows from the MESSAGES table that match the specified arbitrary SQL statement
	 */
	public Messages[] findByDynamicSelect(String sql, Object[] sqlParams) throws MessagesDaoException;

	/** 
	 * Returns all rows from the MESSAGES table that match the specified arbitrary SQL statement
	 */
	public Messages[] findByDynamicWhere(String sql, Object[] sqlParams) throws MessagesDaoException;

}
