/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package com.nhcsys.dataaccess.dao;

import java.util.Date;
import com.nhcsys.dataaccess.dto.*;
import com.nhcsys.dataaccess.exceptions.*;

public interface ModifiedDataDao
{
	/** 
	 * Inserts a new row in the MODIFIED_DATA table.
	 */
	public ModifiedDataPk insert(ModifiedData dto) throws ModifiedDataDaoException;

	/** 
	 * Updates a single row in the MODIFIED_DATA table.
	 */
	public void update(ModifiedDataPk pk, ModifiedData dto) throws ModifiedDataDaoException;

	/** 
	 * Deletes a single row in the MODIFIED_DATA table.
	 */
	public void delete(ModifiedDataPk pk) throws ModifiedDataDaoException;

	/** 
	 * Returns the rows from the MODIFIED_DATA table that matches the specified primary-key value.
	 */
	public ModifiedData findByPrimaryKey(ModifiedDataPk pk) throws ModifiedDataDaoException;

	/** 
	 * Returns all rows from the MODIFIED_DATA table that match the criteria 'MODIFIED_DATA_ID = :modifiedDataId'.
	 */
	public ModifiedData findByPrimaryKey(long modifiedDataId) throws ModifiedDataDaoException;

	/** 
	 * Returns all rows from the MODIFIED_DATA table that match the criteria ''.
	 */
	public ModifiedData[] findAll() throws ModifiedDataDaoException;

	/** 
	 * Returns all rows from the MODIFIED_DATA table that match the criteria 'MODIFIED_DATA_ID = :modifiedDataId'.
	 */
	public ModifiedData[] findWhereModifiedDataIdEquals(long modifiedDataId) throws ModifiedDataDaoException;

	/** 
	 * Returns all rows from the MODIFIED_DATA table that match the criteria 'CUSTOMER_ID = :customerId'.
	 */
	public ModifiedData[] findWhereCustomerIdEquals(long customerId) throws ModifiedDataDaoException;

	/** 
	 * Returns all rows from the MODIFIED_DATA table that match the criteria 'MODIFIED_TIME = :modifiedTime'.
	 */
	public ModifiedData[] findWhereModifiedTimeEquals(Date modifiedTime) throws ModifiedDataDaoException;

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows);

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows();

	/** 
	 * Returns all rows from the MODIFIED_DATA table that match the specified arbitrary SQL statement
	 */
	public ModifiedData[] findByDynamicSelect(String sql, Object[] sqlParams) throws ModifiedDataDaoException;

	/** 
	 * Returns all rows from the MODIFIED_DATA table that match the specified arbitrary SQL statement
	 */
	public ModifiedData[] findByDynamicWhere(String sql, Object[] sqlParams) throws ModifiedDataDaoException;

}
