/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package com.nhcsys.dataaccess.j2ee.delegate;

import com.nhcsys.dataaccess.dao.*;
import com.nhcsys.dataaccess.dto.*;
import com.nhcsys.dataaccess.exceptions.*;
import com.nhcsys.dataaccess.j2ee.session.*;
import java.rmi.RemoteException;
import java.math.*;
import java.util.Date;
import javax.ejb.*;
import org.apache.log4j.Logger;

public class MachinesDelegate implements MachinesDao
{
	private MachinesSession session;

	protected static final Logger logger = Logger.getLogger( MachinesDelegate.class );

	private int maxRows;

	/**
	 * Method 'MachinesDelegate'
	 * 
	 * @param session
	 */
	public MachinesDelegate(final MachinesSession session)
	{
		this.session = session;
	}

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows)
	{
		this.maxRows = maxRows;
	}

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows()
	{
		return maxRows;
	}

	/** 
	 * Inserts a new row in the MACHINES table.
	 */
	public MachinesPk insert(Machines dto) throws MachinesDaoException
	{
		try {
			return session.insert(dto);
		}
		catch (MachinesDaoException daoException) {
			throw daoException;
		}
		catch (Exception ex) {
			logger.error( ex);
			throw new MachinesDaoException( ex.getMessage() );
		}
		
	}

	/** 
	 * Updates a single row in the MACHINES table.
	 */
	public void update(MachinesPk pk, Machines dto) throws MachinesDaoException
	{
		try {
			session.update(pk, dto);
		}
		catch (MachinesDaoException daoException) {
			throw daoException;
		}
		catch (Exception ex) {
			logger.error( ex);
			throw new MachinesDaoException( ex.getMessage() );
		}
		
	}

	/** 
	 * Deletes a single row in the MACHINES table.
	 */
	public void delete(MachinesPk pk) throws MachinesDaoException
	{
		try {
			session.delete(pk);
		}
		catch (MachinesDaoException daoException) {
			throw daoException;
		}
		catch (Exception ex) {
			logger.error( ex);
			throw new MachinesDaoException( ex.getMessage() );
		}
		
	}

	/**
	 * Method 'findByPrimaryKey'
	 * 
	 * @param pk
	 * @throws MachinesDaoException
	 * @return Machines
	 */
	public Machines findByPrimaryKey(MachinesPk pk) throws MachinesDaoException
	{
		try {
			return session.findByPrimaryKey(pk);
		}
		catch (MachinesDaoException daoException) {
			throw daoException;
		}
		catch (Exception ex) {
			logger.error( ex);
			throw new MachinesDaoException( ex.getMessage() );
		}
		
	}

	/**
	 * Method 'findByPrimaryKey'
	 * 
	 * @param machineId
	 * @throws MachinesDaoException
	 * @return Machines
	 */
	public Machines findByPrimaryKey(long machineId) throws MachinesDaoException
	{
		try {
			return session.findByPrimaryKey(machineId);
		}
		catch (MachinesDaoException daoException) {
			throw daoException;
		}
		catch (Exception ex) {
			logger.error( ex);
			throw new MachinesDaoException( ex.getMessage() );
		}
		
	}

	/**
	 * Method 'findAll'
	 * 
	 * @throws MachinesDaoException
	 * @return Machines[]
	 */
	public Machines[] findAll() throws MachinesDaoException
	{
		try {
			return session.findAll();
		}
		catch (MachinesDaoException daoException) {
			throw daoException;
		}
		catch (Exception ex) {
			logger.error( ex);
			throw new MachinesDaoException( ex.getMessage() );
		}
		
	}

	/**
	 * Method 'findWhereMachineIdEquals'
	 * 
	 * @param machineId
	 * @throws MachinesDaoException
	 * @return Machines[]
	 */
	public Machines[] findWhereMachineIdEquals(long machineId) throws MachinesDaoException
	{
		try {
			return session.findWhereMachineIdEquals(machineId);
		}
		catch (MachinesDaoException daoException) {
			throw daoException;
		}
		catch (Exception ex) {
			logger.error( ex);
			throw new MachinesDaoException( ex.getMessage() );
		}
		
	}

	/**
	 * Method 'findWhereCustomerIdEquals'
	 * 
	 * @param customerId
	 * @throws MachinesDaoException
	 * @return Machines[]
	 */
	public Machines[] findWhereCustomerIdEquals(long customerId) throws MachinesDaoException
	{
		try {
			return session.findWhereCustomerIdEquals(customerId);
		}
		catch (MachinesDaoException daoException) {
			throw daoException;
		}
		catch (Exception ex) {
			logger.error( ex);
			throw new MachinesDaoException( ex.getMessage() );
		}
		
	}

	/**
	 * Method 'findWhereViveIdEquals'
	 * 
	 * @param viveId
	 * @throws MachinesDaoException
	 * @return Machines[]
	 */
	public Machines[] findWhereViveIdEquals(String viveId) throws MachinesDaoException
	{
		try {
			return session.findWhereViveIdEquals(viveId);
		}
		catch (MachinesDaoException daoException) {
			throw daoException;
		}
		catch (Exception ex) {
			logger.error( ex);
			throw new MachinesDaoException( ex.getMessage() );
		}
		
	}

	/**
	 * Method 'findWhereCpuSerialNoEquals'
	 * 
	 * @param cpuSerialNo
	 * @throws MachinesDaoException
	 * @return Machines[]
	 */
	public Machines[] findWhereCpuSerialNoEquals(String cpuSerialNo) throws MachinesDaoException
	{
		try {
			return session.findWhereCpuSerialNoEquals(cpuSerialNo);
		}
		catch (MachinesDaoException daoException) {
			throw daoException;
		}
		catch (Exception ex) {
			logger.error( ex);
			throw new MachinesDaoException( ex.getMessage() );
		}
		
	}

	/**
	 * Method 'findWhereKeyDataEquals'
	 * 
	 * @param keyData
	 * @throws MachinesDaoException
	 * @return Machines[]
	 */
	public Machines[] findWhereKeyDataEquals(String keyData) throws MachinesDaoException
	{
		try {
			return session.findWhereKeyDataEquals(keyData);
		}
		catch (MachinesDaoException daoException) {
			throw daoException;
		}
		catch (Exception ex) {
			logger.error( ex);
			throw new MachinesDaoException( ex.getMessage() );
		}
		
	}

	/**
	 * Method 'findWhereKeyTimestampEquals'
	 * 
	 * @param keyTimestamp
	 * @throws MachinesDaoException
	 * @return Machines[]
	 */
	public Machines[] findWhereKeyTimestampEquals(long keyTimestamp) throws MachinesDaoException
	{
		try {
			return session.findWhereKeyTimestampEquals(keyTimestamp);
		}
		catch (MachinesDaoException daoException) {
			throw daoException;
		}
		catch (Exception ex) {
			logger.error( ex);
			throw new MachinesDaoException( ex.getMessage() );
		}
		
	}

	/**
	 * Method 'findWhereStolenFlagEquals'
	 * 
	 * @param stolenFlag
	 * @throws MachinesDaoException
	 * @return Machines[]
	 */
	public Machines[] findWhereStolenFlagEquals(int stolenFlag) throws MachinesDaoException
	{
		try {
			return session.findWhereStolenFlagEquals(stolenFlag);
		}
		catch (MachinesDaoException daoException) {
			throw daoException;
		}
		catch (Exception ex) {
			logger.error( ex);
			throw new MachinesDaoException( ex.getMessage() );
		}
		
	}

	/**
	 * Method 'findWhereTerminateFlagEquals'
	 * 
	 * @param terminateFlag
	 * @throws MachinesDaoException
	 * @return Machines[]
	 */
	public Machines[] findWhereTerminateFlagEquals(int terminateFlag) throws MachinesDaoException
	{
		try {
			return session.findWhereTerminateFlagEquals(terminateFlag);
		}
		catch (MachinesDaoException daoException) {
			throw daoException;
		}
		catch (Exception ex) {
			logger.error( ex);
			throw new MachinesDaoException( ex.getMessage() );
		}
		
	}

	/**
	 * Method 'findWhereRegisteredFlagEquals'
	 * 
	 * @param registeredFlag
	 * @throws MachinesDaoException
	 * @return Machines[]
	 */
	public Machines[] findWhereRegisteredFlagEquals(int registeredFlag) throws MachinesDaoException
	{
		try {
			return session.findWhereRegisteredFlagEquals(registeredFlag);
		}
		catch (MachinesDaoException daoException) {
			throw daoException;
		}
		catch (Exception ex) {
			logger.error( ex);
			throw new MachinesDaoException( ex.getMessage() );
		}
		
	}

	/**
	 * Method 'findByDynamicSelect'
	 * 
	 * @param sql
	 * @param sqlParams
	 * @throws MachinesDaoException
	 * @return Machines[]
	 */
	public Machines[] findByDynamicSelect(String sql, Object[] sqlParams) throws MachinesDaoException
	{
		try {
			return session.findByDynamicSelect(sql, sqlParams);
		}
		catch (MachinesDaoException daoException) {
			throw daoException;
		}
		catch (Exception ex) {
			logger.error( ex);
			throw new MachinesDaoException( ex.getMessage() );
		}
		
	}

	/**
	 * Method 'findByDynamicWhere'
	 * 
	 * @param sql
	 * @param sqlParams
	 * @throws MachinesDaoException
	 * @return Machines[]
	 */
	public Machines[] findByDynamicWhere(String sql, Object[] sqlParams) throws MachinesDaoException
	{
		try {
			return session.findByDynamicWhere(sql, sqlParams);
		}
		catch (MachinesDaoException daoException) {
			throw daoException;
		}
		catch (Exception ex) {
			logger.error( ex);
			throw new MachinesDaoException( ex.getMessage() );
		}
		
	}

}
