/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package com.nhcsys.dataaccess.j2ee.delegate;

import com.nhcsys.dataaccess.dao.*;
import com.nhcsys.dataaccess.dto.*;
import com.nhcsys.dataaccess.exceptions.*;
import com.nhcsys.dataaccess.j2ee.session.*;
import java.rmi.RemoteException;
import java.math.*;
import java.util.Date;
import javax.ejb.*;
import org.apache.log4j.Logger;

public class WsSessionsDelegate implements WsSessionsDao
{
	private WsSessionsSession session;

	protected static final Logger logger = Logger.getLogger( WsSessionsDelegate.class );

	private int maxRows;

	/**
	 * Method 'WsSessionsDelegate'
	 * 
	 * @param session
	 */
	public WsSessionsDelegate(final WsSessionsSession session)
	{
		this.session = session;
	}

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows)
	{
		this.maxRows = maxRows;
	}

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows()
	{
		return maxRows;
	}

	/** 
	 * Inserts a new row in the WS_SESSIONS table.
	 */
	public WsSessionsPk insert(WsSessions dto) throws WsSessionsDaoException
	{
		try {
			return session.insert(dto);
		}
		catch (WsSessionsDaoException daoException) {
			throw daoException;
		}
		catch (Exception ex) {
			logger.error( ex);
			throw new WsSessionsDaoException( ex.getMessage() );
		}
		
	}

	/** 
	 * Updates a single row in the WS_SESSIONS table.
	 */
	public void update(WsSessionsPk pk, WsSessions dto) throws WsSessionsDaoException
	{
		try {
			session.update(pk, dto);
		}
		catch (WsSessionsDaoException daoException) {
			throw daoException;
		}
		catch (Exception ex) {
			logger.error( ex);
			throw new WsSessionsDaoException( ex.getMessage() );
		}
		
	}

	/** 
	 * Deletes a single row in the WS_SESSIONS table.
	 */
	public void delete(WsSessionsPk pk) throws WsSessionsDaoException
	{
		try {
			session.delete(pk);
		}
		catch (WsSessionsDaoException daoException) {
			throw daoException;
		}
		catch (Exception ex) {
			logger.error( ex);
			throw new WsSessionsDaoException( ex.getMessage() );
		}
		
	}

	/**
	 * Method 'findByPrimaryKey'
	 * 
	 * @param pk
	 * @throws WsSessionsDaoException
	 * @return WsSessions
	 */
	public WsSessions findByPrimaryKey(WsSessionsPk pk) throws WsSessionsDaoException
	{
		try {
			return session.findByPrimaryKey(pk);
		}
		catch (WsSessionsDaoException daoException) {
			throw daoException;
		}
		catch (Exception ex) {
			logger.error( ex);
			throw new WsSessionsDaoException( ex.getMessage() );
		}
		
	}

	/**
	 * Method 'findByPrimaryKey'
	 * 
	 * @param wsSessionId
	 * @throws WsSessionsDaoException
	 * @return WsSessions
	 */
	public WsSessions findByPrimaryKey(long wsSessionId) throws WsSessionsDaoException
	{
		try {
			return session.findByPrimaryKey(wsSessionId);
		}
		catch (WsSessionsDaoException daoException) {
			throw daoException;
		}
		catch (Exception ex) {
			logger.error( ex);
			throw new WsSessionsDaoException( ex.getMessage() );
		}
		
	}

	/**
	 * Method 'findAll'
	 * 
	 * @throws WsSessionsDaoException
	 * @return WsSessions[]
	 */
	public WsSessions[] findAll() throws WsSessionsDaoException
	{
		try {
			return session.findAll();
		}
		catch (WsSessionsDaoException daoException) {
			throw daoException;
		}
		catch (Exception ex) {
			logger.error( ex);
			throw new WsSessionsDaoException( ex.getMessage() );
		}
		
	}

	/**
	 * Method 'findWhereWsSessionIdEquals'
	 * 
	 * @param wsSessionId
	 * @throws WsSessionsDaoException
	 * @return WsSessions[]
	 */
	public WsSessions[] findWhereWsSessionIdEquals(long wsSessionId) throws WsSessionsDaoException
	{
		try {
			return session.findWhereWsSessionIdEquals(wsSessionId);
		}
		catch (WsSessionsDaoException daoException) {
			throw daoException;
		}
		catch (Exception ex) {
			logger.error( ex);
			throw new WsSessionsDaoException( ex.getMessage() );
		}
		
	}

	/**
	 * Method 'findWhereAppNameEquals'
	 * 
	 * @param appName
	 * @throws WsSessionsDaoException
	 * @return WsSessions[]
	 */
	public WsSessions[] findWhereAppNameEquals(String appName) throws WsSessionsDaoException
	{
		try {
			return session.findWhereAppNameEquals(appName);
		}
		catch (WsSessionsDaoException daoException) {
			throw daoException;
		}
		catch (Exception ex) {
			logger.error( ex);
			throw new WsSessionsDaoException( ex.getMessage() );
		}
		
	}

	/**
	 * Method 'findWhereSessionIdEquals'
	 * 
	 * @param sessionId
	 * @throws WsSessionsDaoException
	 * @return WsSessions[]
	 */
	public WsSessions[] findWhereSessionIdEquals(String sessionId) throws WsSessionsDaoException
	{
		try {
			return session.findWhereSessionIdEquals(sessionId);
		}
		catch (WsSessionsDaoException daoException) {
			throw daoException;
		}
		catch (Exception ex) {
			logger.error( ex);
			throw new WsSessionsDaoException( ex.getMessage() );
		}
		
	}

	/**
	 * Method 'findWhereMachineIdEquals'
	 * 
	 * @param machineId
	 * @throws WsSessionsDaoException
	 * @return WsSessions[]
	 */
	public WsSessions[] findWhereMachineIdEquals(long machineId) throws WsSessionsDaoException
	{
		try {
			return session.findWhereMachineIdEquals(machineId);
		}
		catch (WsSessionsDaoException daoException) {
			throw daoException;
		}
		catch (Exception ex) {
			logger.error( ex);
			throw new WsSessionsDaoException( ex.getMessage() );
		}
		
	}

	/**
	 * Method 'findWhereTimeStampEquals'
	 * 
	 * @param timeStamp
	 * @throws WsSessionsDaoException
	 * @return WsSessions[]
	 */
	public WsSessions[] findWhereTimeStampEquals(Date timeStamp) throws WsSessionsDaoException
	{
		try {
			return session.findWhereTimeStampEquals(timeStamp);
		}
		catch (WsSessionsDaoException daoException) {
			throw daoException;
		}
		catch (Exception ex) {
			logger.error( ex);
			throw new WsSessionsDaoException( ex.getMessage() );
		}
		
	}

	/**
	 * Method 'findByDynamicSelect'
	 * 
	 * @param sql
	 * @param sqlParams
	 * @throws WsSessionsDaoException
	 * @return WsSessions[]
	 */
	public WsSessions[] findByDynamicSelect(String sql, Object[] sqlParams) throws WsSessionsDaoException
	{
		try {
			return session.findByDynamicSelect(sql, sqlParams);
		}
		catch (WsSessionsDaoException daoException) {
			throw daoException;
		}
		catch (Exception ex) {
			logger.error( ex);
			throw new WsSessionsDaoException( ex.getMessage() );
		}
		
	}

	/**
	 * Method 'findByDynamicWhere'
	 * 
	 * @param sql
	 * @param sqlParams
	 * @throws WsSessionsDaoException
	 * @return WsSessions[]
	 */
	public WsSessions[] findByDynamicWhere(String sql, Object[] sqlParams) throws WsSessionsDaoException
	{
		try {
			return session.findByDynamicWhere(sql, sqlParams);
		}
		catch (WsSessionsDaoException daoException) {
			throw daoException;
		}
		catch (Exception ex) {
			logger.error( ex);
			throw new WsSessionsDaoException( ex.getMessage() );
		}
		
	}

}
