/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package com.nhcsys.dataaccess.jdbc;

import com.nhcsys.dataaccess.dao.*;
import com.nhcsys.dataaccess.factory.*;
import com.nhcsys.dataaccess.dto.*;
import com.nhcsys.dataaccess.exceptions.*;
import java.sql.Connection;
import java.util.Collection;
import org.apache.log4j.Logger;
import java.sql.PreparedStatement;
import java.sql.Statement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Time;
import java.util.List;
import java.util.Iterator;
import java.util.ArrayList;

public class TelesalesOrgsDaoImpl extends AbstractDAO implements TelesalesOrgsDao
{
	/** 
	 * The factory class for this DAO has two versions of the create() method - one that
takes no arguments and one that takes a Connection argument. If the Connection version
is chosen then the connection will be stored in this attribute and will be used by all
calls to this DAO, otherwise a new Connection will be allocated for each operation.
	 */
	protected java.sql.Connection userConn;

	protected static final Logger logger = Logger.getLogger( TelesalesOrgsDaoImpl.class );

	/** 
	 * All finder methods in this class use this SELECT constant to build their queries
	 */
	protected final String SQL_SELECT = "SELECT ORG_ID, ORG_NAME, CONFIG_VALUE FROM " + getTableName() + "";

	/** 
	 * Finder methods will pass this value to the JDBC setMaxRows method
	 */
	private int maxRows;

	/** 
	 * SQL INSERT statement for this table
	 */
	protected final String SQL_INSERT = "INSERT INTO " + getTableName() + " ( ORG_ID, ORG_NAME, CONFIG_VALUE ) VALUES ( ?, ?, ? )";

	/** 
	 * SQL UPDATE statement for this table
	 */
	protected final String SQL_UPDATE = "UPDATE " + getTableName() + " SET ORG_ID = ?, ORG_NAME = ?, CONFIG_VALUE = ? WHERE ORG_ID = ?";

	/** 
	 * SQL DELETE statement for this table
	 */
	protected final String SQL_DELETE = "DELETE FROM " + getTableName() + " WHERE ORG_ID = ?";

	/** 
	 * Index of column ORG_ID
	 */
	protected static final int COLUMN_ORG_ID = 1;

	/** 
	 * Index of column ORG_NAME
	 */
	protected static final int COLUMN_ORG_NAME = 2;

	/** 
	 * Index of column CONFIG_VALUE
	 */
	protected static final int COLUMN_CONFIG_VALUE = 3;

	/** 
	 * Number of columns
	 */
	protected static final int NUMBER_OF_COLUMNS = 3;

	/** 
	 * Index of primary-key column ORG_ID
	 */
	protected static final int PK_COLUMN_ORG_ID = 1;

	/** 
	 * Inserts a new row in the TELESALES_ORGS table.
	 */
	public TelesalesOrgsPk insert(TelesalesOrgs dto) throws TelesalesOrgsDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			stmt = conn.prepareStatement( "SELECT orgs_id_seq.NEXTVAL FROM DUAL" );
			rs = stmt.executeQuery();
			if (rs.next()) {
				dto.setOrgId( rs.getLong( 1 ) );
				rs.close();
				stmt.close();
			}
		
			StringBuffer sql = new StringBuffer();
			sql.append( "INSERT INTO " + getTableName() + " (" );
			int modifiedCount = 0;
			if (dto.isOrgIdModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
				}
		
				sql.append( "ORG_ID" );
				modifiedCount++;
			}
		
			if (dto.isOrgNameModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
				}
		
				sql.append( "ORG_NAME" );
				modifiedCount++;
			}
		
			if (dto.isConfigValueModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
				}
		
				sql.append( "CONFIG_VALUE" );
				modifiedCount++;
			}
		
			if (modifiedCount==0) {
				// nothing to insert
				throw new IllegalStateException( "Nothing to insert" );
			}
		
			sql.append( ") VALUES (" );
			for (int i=0; i<modifiedCount; i++ ) {
				if (i>0) {
					sql.append( "," );
				}
		
				sql.append( "?" );
			}
		
			sql.append( ")" );
			stmt = conn.prepareStatement( sql.toString() );
			int index = 1;
			if (dto.isOrgIdModified()) {
				stmt.setLong( index++, dto.getOrgId() );
			}
		
			if (dto.isOrgNameModified()) {
				stmt.setString( index++, dto.getOrgName() );
			}
		
			if (dto.isConfigValueModified()) {
				stmt.setString( index++, dto.getConfigValue() );
			}
		
			if (logger.isDebugEnabled()) {
				logger.debug( "Executing " + sql.toString() + " with values: " + dto);
			}
		
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			if (logger.isDebugEnabled()) {
				logger.debug( rows + " rows affected (" + (t2-t1) + " ms)");
			}
		
			return dto.createPk();
		}
		catch (Exception _e) {
			logger.error( "Exception: " + _e.getMessage(), _e );
			throw new TelesalesOrgsDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Updates a single row in the TELESALES_ORGS table.
	 */
	public void update(TelesalesOrgsPk pk, TelesalesOrgs dto) throws TelesalesOrgsDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			StringBuffer sql = new StringBuffer();
			sql.append( "UPDATE " + getTableName() + " SET " );
			boolean modified = false;
			if (dto.isOrgIdModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "ORG_ID=?" );
				modified=true;
			}
		
			if (dto.isOrgNameModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "ORG_NAME=?" );
				modified=true;
			}
		
			if (dto.isConfigValueModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "CONFIG_VALUE=?" );
				modified=true;
			}
		
			if (!modified) {
				// nothing to update
				return;
			}
		
			sql.append( " WHERE ORG_ID=?" );
			if (logger.isDebugEnabled()) {
				logger.debug( "Executing " + sql.toString() + " with values: " + dto);
			}
		
			stmt = conn.prepareStatement( sql.toString() );
			int index = 1;
			if (dto.isOrgIdModified()) {
				stmt.setLong( index++, dto.getOrgId() );
			}
		
			if (dto.isOrgNameModified()) {
				stmt.setString( index++, dto.getOrgName() );
			}
		
			if (dto.isConfigValueModified()) {
				stmt.setString( index++, dto.getConfigValue() );
			}
		
			stmt.setLong( index++, pk.getOrgId() );
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			if (logger.isDebugEnabled()) {
				logger.debug( rows + " rows affected (" + (t2-t1) + " ms)");
			}
		
		}
		catch (Exception _e) {
			logger.error( "Exception: " + _e.getMessage(), _e );
			throw new TelesalesOrgsDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Deletes a single row in the TELESALES_ORGS table.
	 */
	public void delete(TelesalesOrgsPk pk) throws TelesalesOrgsDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			if (logger.isDebugEnabled()) {
				logger.debug( "Executing " + SQL_DELETE + " with PK: " + pk);
			}
		
			stmt = conn.prepareStatement( SQL_DELETE );
			stmt.setLong( 1, pk.getOrgId() );
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			if (logger.isDebugEnabled()) {
				logger.debug( rows + " rows affected (" + (t2-t1) + " ms)");
			}
		
		}
		catch (Exception _e) {
			logger.error( "Exception: " + _e.getMessage(), _e );
			throw new TelesalesOrgsDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns the rows from the TELESALES_ORGS table that matches the specified primary-key value.
	 */
	public TelesalesOrgs findByPrimaryKey(TelesalesOrgsPk pk) throws TelesalesOrgsDaoException
	{
		return findByPrimaryKey( pk.getOrgId() );
	}

	/** 
	 * Returns all rows from the TELESALES_ORGS table that match the criteria 'ORG_ID = :orgId'.
	 */
	public TelesalesOrgs findByPrimaryKey(long orgId) throws TelesalesOrgsDaoException
	{
		TelesalesOrgs ret[] = findByDynamicSelect( SQL_SELECT + " WHERE ORG_ID = ?", new Object[] {  new Long(orgId) } );
		return ret.length==0 ? null : ret[0];
	}

	/** 
	 * Returns all rows from the TELESALES_ORGS table that match the criteria ''.
	 */
	public TelesalesOrgs[] findAll() throws TelesalesOrgsDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " ORDER BY ORG_ID", null );
	}

	/** 
	 * Returns all rows from the TELESALES_ORGS table that match the criteria 'ORG_ID = :orgId'.
	 */
	public TelesalesOrgs[] findWhereOrgIdEquals(long orgId) throws TelesalesOrgsDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ORG_ID = ? ORDER BY ORG_ID", new Object[] {  new Long(orgId) } );
	}

	/** 
	 * Returns all rows from the TELESALES_ORGS table that match the criteria 'ORG_NAME = :orgName'.
	 */
	public TelesalesOrgs[] findWhereOrgNameEquals(String orgName) throws TelesalesOrgsDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE ORG_NAME = ? ORDER BY ORG_NAME", new Object[] { orgName } );
	}

	/** 
	 * Returns all rows from the TELESALES_ORGS table that match the criteria 'CONFIG_VALUE = :configValue'.
	 */
	public TelesalesOrgs[] findWhereConfigValueEquals(String configValue) throws TelesalesOrgsDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE CONFIG_VALUE = ? ORDER BY CONFIG_VALUE", new Object[] { configValue } );
	}

	/**
	 * Method 'TelesalesOrgsDaoImpl'
	 * 
	 */
	public TelesalesOrgsDaoImpl()
	{
	}

	/**
	 * Method 'TelesalesOrgsDaoImpl'
	 * 
	 * @param userConn
	 */
	public TelesalesOrgsDaoImpl(final java.sql.Connection userConn)
	{
		this.userConn = userConn;
	}

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows)
	{
		this.maxRows = maxRows;
	}

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows()
	{
		return maxRows;
	}

	/**
	 * Method 'getTableName'
	 * 
	 * @return String
	 */
	public String getTableName()
	{
		return "TELESALES_ORGS";
	}

	/** 
	 * Fetches a single row from the result set
	 */
	protected TelesalesOrgs fetchSingleResult(ResultSet rs) throws SQLException
	{
		if (rs.next()) {
			TelesalesOrgs dto = new TelesalesOrgs();
			populateDto( dto, rs);
			return dto;
		} else {
			return null;
		}
		
	}

	/** 
	 * Fetches multiple rows from the result set
	 */
	protected TelesalesOrgs[] fetchMultiResults(ResultSet rs) throws SQLException
	{
		Collection resultList = new ArrayList();
		while (rs.next()) {
			TelesalesOrgs dto = new TelesalesOrgs();
			populateDto( dto, rs);
			resultList.add( dto );
		}
		
		TelesalesOrgs ret[] = new TelesalesOrgs[ resultList.size() ];
		resultList.toArray( ret );
		return ret;
	}

	/** 
	 * Populates a DTO with data from a ResultSet
	 */
	protected void populateDto(TelesalesOrgs dto, ResultSet rs) throws SQLException
	{
		dto.setOrgId( rs.getLong( COLUMN_ORG_ID ) );
		dto.setOrgName( rs.getString( COLUMN_ORG_NAME ) );
		dto.setConfigValue( rs.getString( COLUMN_CONFIG_VALUE ) );
	}

	/** 
	 * Returns all rows from the TELESALES_ORGS table that match the specified arbitrary SQL statement
	 */
	public TelesalesOrgs[] findByDynamicSelect(String sql, Object[] sqlParams) throws TelesalesOrgsDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = sql;
		
		
			if (logger.isDebugEnabled()) {
				logger.debug( "Executing " + SQL);
			}
		
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			logger.error( "Exception: " + _e.getMessage(), _e );
			throw new TelesalesOrgsDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns all rows from the TELESALES_ORGS table that match the specified arbitrary SQL statement
	 */
	public TelesalesOrgs[] findByDynamicWhere(String sql, Object[] sqlParams) throws TelesalesOrgsDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = SQL_SELECT + " WHERE " + sql;
		
		
			if (logger.isDebugEnabled()) {
				logger.debug( "Executing " + SQL);
			}
		
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			logger.error( "Exception: " + _e.getMessage(), _e );
			throw new TelesalesOrgsDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

}
