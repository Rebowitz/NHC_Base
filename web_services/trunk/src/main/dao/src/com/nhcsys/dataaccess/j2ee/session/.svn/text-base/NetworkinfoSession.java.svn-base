/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package com.nhcsys.dataaccess.j2ee.session;

import com.nhcsys.dataaccess.factory.*;
import com.nhcsys.dataaccess.dao.*;
import com.nhcsys.dataaccess.dto.*;
import com.nhcsys.dataaccess.exceptions.*;
import java.rmi.RemoteException;
import java.math.*;
import java.util.Date;
import javax.ejb.*;

public interface NetworkinfoSession extends EJBObject
{
	/** 
	 * Inserts a new row in the NETWORKINFO table.
	 */
	public NetworkinfoPk insert(Networkinfo dto) throws NetworkinfoDaoException, RemoteException;

	/** 
	 * Updates a single row in the NETWORKINFO table.
	 */
	public void update(NetworkinfoPk pk, Networkinfo dto) throws NetworkinfoDaoException, RemoteException;

	/** 
	 * Deletes a single row in the NETWORKINFO table.
	 */
	public void delete(NetworkinfoPk pk) throws NetworkinfoDaoException, RemoteException;

	/** 
	 * Returns the rows from the NETWORKINFO table that matches the specified primary-key value.
	 */
	public Networkinfo findByPrimaryKey(NetworkinfoPk pk) throws NetworkinfoDaoException, RemoteException;

	/**
	 * Method 'findByPrimaryKey'
	 * 
	 * @param networkinfoId
	 * @throws NetworkinfoDaoException
	 * @throws RemoteException
	 * @return Networkinfo
	 */
	public Networkinfo findByPrimaryKey(long networkinfoId) throws NetworkinfoDaoException, RemoteException;

	/**
	 * Method 'findAll'
	 * 
	 * @throws NetworkinfoDaoException
	 * @throws RemoteException
	 * @return Networkinfo[]
	 */
	public Networkinfo[] findAll() throws NetworkinfoDaoException, RemoteException;

	/**
	 * Method 'findWhereNetworkinfoIdEquals'
	 * 
	 * @param networkinfoId
	 * @throws NetworkinfoDaoException
	 * @throws RemoteException
	 * @return Networkinfo[]
	 */
	public Networkinfo[] findWhereNetworkinfoIdEquals(long networkinfoId) throws NetworkinfoDaoException, RemoteException;

	/**
	 * Method 'findWhereCustomerIdEquals'
	 * 
	 * @param customerId
	 * @throws NetworkinfoDaoException
	 * @throws RemoteException
	 * @return Networkinfo[]
	 */
	public Networkinfo[] findWhereCustomerIdEquals(long customerId) throws NetworkinfoDaoException, RemoteException;

	/**
	 * Method 'findWhereMachineIdEquals'
	 * 
	 * @param machineId
	 * @throws NetworkinfoDaoException
	 * @throws RemoteException
	 * @return Networkinfo[]
	 */
	public Networkinfo[] findWhereMachineIdEquals(long machineId) throws NetworkinfoDaoException, RemoteException;

	/**
	 * Method 'findWhereSsidEquals'
	 * 
	 * @param ssid
	 * @throws NetworkinfoDaoException
	 * @throws RemoteException
	 * @return Networkinfo[]
	 */
	public Networkinfo[] findWhereSsidEquals(String ssid) throws NetworkinfoDaoException, RemoteException;

	/**
	 * Method 'findWherePassphraseEquals'
	 * 
	 * @param passphrase
	 * @throws NetworkinfoDaoException
	 * @throws RemoteException
	 * @return Networkinfo[]
	 */
	public Networkinfo[] findWherePassphraseEquals(String passphrase) throws NetworkinfoDaoException, RemoteException;

	/**
	 * Method 'findWhereWirelessinfotypeEquals'
	 * 
	 * @param wirelessinfotype
	 * @throws NetworkinfoDaoException
	 * @throws RemoteException
	 * @return Networkinfo[]
	 */
	public Networkinfo[] findWhereWirelessinfotypeEquals(String wirelessinfotype) throws NetworkinfoDaoException, RemoteException;

	/**
	 * Method 'findWhereTimestampEquals'
	 * 
	 * @param timestamp
	 * @throws NetworkinfoDaoException
	 * @throws RemoteException
	 * @return Networkinfo[]
	 */
	public Networkinfo[] findWhereTimestampEquals(Date timestamp) throws NetworkinfoDaoException, RemoteException;

	/**
	 * Method 'findByDynamicSelect'
	 * 
	 * @param sql
	 * @param arg
	 * @throws NetworkinfoDaoException
	 * @throws RemoteException
	 * @return Networkinfo[]
	 */
	public Networkinfo[] findByDynamicSelect(String sql, Object[] arg) throws NetworkinfoDaoException, RemoteException;

	/**
	 * Method 'findByDynamicWhere'
	 * 
	 * @param sql
	 * @param arg
	 * @throws NetworkinfoDaoException
	 * @throws RemoteException
	 * @return Networkinfo[]
	 */
	public Networkinfo[] findByDynamicWhere(String sql, Object[] arg) throws NetworkinfoDaoException, RemoteException;

}
