/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package com.nhcsys.dataaccess.dao;

import com.nhcsys.dataaccess.dto.*;
import com.nhcsys.dataaccess.exceptions.*;

public interface InstalledSoftwareDao
{
	/** 
	 * Inserts a new row in the INSTALLED_SOFTWARE table.
	 */
	public InstalledSoftwarePk insert(InstalledSoftware dto) throws InstalledSoftwareDaoException;

	/** 
	 * Updates a single row in the INSTALLED_SOFTWARE table.
	 */
	public void update(InstalledSoftwarePk pk, InstalledSoftware dto) throws InstalledSoftwareDaoException;

	/** 
	 * Deletes a single row in the INSTALLED_SOFTWARE table.
	 */
	public void delete(InstalledSoftwarePk pk) throws InstalledSoftwareDaoException;

	/** 
	 * Returns the rows from the INSTALLED_SOFTWARE table that matches the specified primary-key value.
	 */
	public InstalledSoftware findByPrimaryKey(InstalledSoftwarePk pk) throws InstalledSoftwareDaoException;

	/** 
	 * Returns all rows from the INSTALLED_SOFTWARE table that match the criteria 'SOFTWARE_ID = :softwareId'.
	 */
	public InstalledSoftware findByPrimaryKey(long softwareId) throws InstalledSoftwareDaoException;

	/** 
	 * Returns all rows from the INSTALLED_SOFTWARE table that match the criteria 'SESSION_ID = :sessionId'.
	 */
	public InstalledSoftware[] findWhereSessionIdEquals(String sessionId) throws InstalledSoftwareDaoException;

	/** 
	 * Returns all rows from the INSTALLED_SOFTWARE table that match the criteria ''.
	 */
	public InstalledSoftware[] findAll() throws InstalledSoftwareDaoException;

	/** 
	 * Returns all rows from the INSTALLED_SOFTWARE table that match the criteria 'SOFTWARE_ID = :softwareId'.
	 */
	public InstalledSoftware[] findWhereSoftwareIdEquals(long softwareId) throws InstalledSoftwareDaoException;

	/** 
	 * Returns all rows from the INSTALLED_SOFTWARE table that match the criteria 'CUSTOMER_ID = :customerId'.
	 */
	public InstalledSoftware[] findWhereCustomerIdEquals(long customerId) throws InstalledSoftwareDaoException;

	/** 
	 * Returns all rows from the INSTALLED_SOFTWARE table that match the criteria 'MACHINE_ID = :machineId'.
	 */
	public InstalledSoftware[] findWhereMachineIdEquals(long machineId) throws InstalledSoftwareDaoException;

	/** 
	 * Returns all rows from the INSTALLED_SOFTWARE table that match the criteria 'PRODUCT_KEY = :productKey'.
	 */
	public InstalledSoftware[] findWhereProductKeyEquals(String productKey) throws InstalledSoftwareDaoException;

	/** 
	 * Returns all rows from the INSTALLED_SOFTWARE table that match the criteria 'PRODUCT_NAME = :productName'.
	 */
	public InstalledSoftware[] findWhereProductNameEquals(String productName) throws InstalledSoftwareDaoException;

	/** 
	 * Returns all rows from the INSTALLED_SOFTWARE table that match the criteria 'COMPANY_NAME = :companyName'.
	 */
	public InstalledSoftware[] findWhereCompanyNameEquals(String companyName) throws InstalledSoftwareDaoException;

	/** 
	 * Returns all rows from the INSTALLED_SOFTWARE table that match the criteria 'PRODUCT_VERSION = :productVersion'.
	 */
	public InstalledSoftware[] findWhereProductVersionEquals(String productVersion) throws InstalledSoftwareDaoException;

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows);

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows();

	/** 
	 * Returns all rows from the INSTALLED_SOFTWARE table that match the specified arbitrary SQL statement
	 */
	public InstalledSoftware[] findByDynamicSelect(String sql, Object[] sqlParams) throws InstalledSoftwareDaoException;

	/** 
	 * Returns all rows from the INSTALLED_SOFTWARE table that match the specified arbitrary SQL statement
	 */
	public InstalledSoftware[] findByDynamicWhere(String sql, Object[] sqlParams) throws InstalledSoftwareDaoException;

}
