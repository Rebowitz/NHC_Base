/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package com.nhcsys.dataaccess.jdbc;

import com.nhcsys.dataaccess.dao.*;
import com.nhcsys.dataaccess.factory.*;
import java.util.Date;
import com.nhcsys.dataaccess.dto.*;
import com.nhcsys.dataaccess.exceptions.*;
import java.sql.Connection;
import java.util.Collection;
import org.apache.log4j.Logger;
import java.sql.PreparedStatement;
import java.sql.Statement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Time;
import java.util.List;
import java.util.Iterator;
import java.util.ArrayList;

public class ModifiedDataDaoImpl extends AbstractDAO implements ModifiedDataDao
{
	/** 
	 * The factory class for this DAO has two versions of the create() method - one that
takes no arguments and one that takes a Connection argument. If the Connection version
is chosen then the connection will be stored in this attribute and will be used by all
calls to this DAO, otherwise a new Connection will be allocated for each operation.
	 */
	protected java.sql.Connection userConn;

	protected static final Logger logger = Logger.getLogger( ModifiedDataDaoImpl.class );

	/** 
	 * All finder methods in this class use this SELECT constant to build their queries
	 */
	protected final String SQL_SELECT = "SELECT MODIFIED_DATA_ID, CUSTOMER_ID, MODIFIED_TIME FROM " + getTableName() + "";

	/** 
	 * Finder methods will pass this value to the JDBC setMaxRows method
	 */
	private int maxRows;

	/** 
	 * SQL INSERT statement for this table
	 */
	protected final String SQL_INSERT = "INSERT INTO " + getTableName() + " ( MODIFIED_DATA_ID, CUSTOMER_ID, MODIFIED_TIME ) VALUES ( ?, ?, ? )";

	/** 
	 * SQL UPDATE statement for this table
	 */
	protected final String SQL_UPDATE = "UPDATE " + getTableName() + " SET MODIFIED_DATA_ID = ?, CUSTOMER_ID = ?, MODIFIED_TIME = ? WHERE MODIFIED_DATA_ID = ?";

	/** 
	 * SQL DELETE statement for this table
	 */
	protected final String SQL_DELETE = "DELETE FROM " + getTableName() + " WHERE MODIFIED_DATA_ID = ?";

	/** 
	 * Index of column MODIFIED_DATA_ID
	 */
	protected static final int COLUMN_MODIFIED_DATA_ID = 1;

	/** 
	 * Index of column CUSTOMER_ID
	 */
	protected static final int COLUMN_CUSTOMER_ID = 2;

	/** 
	 * Index of column MODIFIED_TIME
	 */
	protected static final int COLUMN_MODIFIED_TIME = 3;

	/** 
	 * Number of columns
	 */
	protected static final int NUMBER_OF_COLUMNS = 3;

	/** 
	 * Index of primary-key column MODIFIED_DATA_ID
	 */
	protected static final int PK_COLUMN_MODIFIED_DATA_ID = 1;

	/** 
	 * Inserts a new row in the MODIFIED_DATA table.
	 */
	public ModifiedDataPk insert(ModifiedData dto) throws ModifiedDataDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			stmt = conn.prepareStatement( "SELECT modified_data_id_seq.NEXTVAL FROM DUAL" );
			rs = stmt.executeQuery();
			if (rs.next()) {
				dto.setModifiedDataId( rs.getLong( 1 ) );
				rs.close();
				stmt.close();
			}
		
			StringBuffer sql = new StringBuffer();
			sql.append( "INSERT INTO " + getTableName() + " (" );
			int modifiedCount = 0;
			if (dto.isModifiedDataIdModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
				}
		
				sql.append( "MODIFIED_DATA_ID" );
				modifiedCount++;
			}
		
			if (dto.isCustomerIdModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
				}
		
				sql.append( "CUSTOMER_ID" );
				modifiedCount++;
			}
		
			if (dto.isModifiedTimeModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
				}
		
				sql.append( "MODIFIED_TIME" );
				modifiedCount++;
			}
		
			if (modifiedCount==0) {
				// nothing to insert
				throw new IllegalStateException( "Nothing to insert" );
			}
		
			sql.append( ") VALUES (" );
			for (int i=0; i<modifiedCount; i++ ) {
				if (i>0) {
					sql.append( "," );
				}
		
				sql.append( "?" );
			}
		
			sql.append( ")" );
			stmt = conn.prepareStatement( sql.toString() );
			int index = 1;
			if (dto.isModifiedDataIdModified()) {
				stmt.setLong( index++, dto.getModifiedDataId() );
			}
		
			if (dto.isCustomerIdModified()) {
				stmt.setLong( index++, dto.getCustomerId() );
			}
		
			if (dto.isModifiedTimeModified()) {
				stmt.setTimestamp(index++, dto.getModifiedTime()==null ? null : new java.sql.Timestamp( dto.getModifiedTime().getTime() ) );
			}
		
			if (logger.isDebugEnabled()) {
				logger.debug( "Executing " + sql.toString() + " with values: " + dto);
			}
		
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			if (logger.isDebugEnabled()) {
				logger.debug( rows + " rows affected (" + (t2-t1) + " ms)");
			}
		
			return dto.createPk();
		}
		catch (Exception _e) {
			logger.error( "Exception: " + _e.getMessage(), _e );
			throw new ModifiedDataDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Updates a single row in the MODIFIED_DATA table.
	 */
	public void update(ModifiedDataPk pk, ModifiedData dto) throws ModifiedDataDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			StringBuffer sql = new StringBuffer();
			sql.append( "UPDATE " + getTableName() + " SET " );
			boolean modified = false;
			if (dto.isModifiedDataIdModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "MODIFIED_DATA_ID=?" );
				modified=true;
			}
		
			if (dto.isCustomerIdModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "CUSTOMER_ID=?" );
				modified=true;
			}
		
			if (dto.isModifiedTimeModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "MODIFIED_TIME=?" );
				modified=true;
			}
		
			if (!modified) {
				// nothing to update
				return;
			}
		
			sql.append( " WHERE MODIFIED_DATA_ID=?" );
			if (logger.isDebugEnabled()) {
				logger.debug( "Executing " + sql.toString() + " with values: " + dto);
			}
		
			stmt = conn.prepareStatement( sql.toString() );
			int index = 1;
			if (dto.isModifiedDataIdModified()) {
				stmt.setLong( index++, dto.getModifiedDataId() );
			}
		
			if (dto.isCustomerIdModified()) {
				stmt.setLong( index++, dto.getCustomerId() );
			}
		
			if (dto.isModifiedTimeModified()) {
				stmt.setTimestamp(index++, dto.getModifiedTime()==null ? null : new java.sql.Timestamp( dto.getModifiedTime().getTime() ) );
			}
		
			stmt.setLong( index++, pk.getModifiedDataId() );
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			if (logger.isDebugEnabled()) {
				logger.debug( rows + " rows affected (" + (t2-t1) + " ms)");
			}
		
		}
		catch (Exception _e) {
			logger.error( "Exception: " + _e.getMessage(), _e );
			throw new ModifiedDataDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Deletes a single row in the MODIFIED_DATA table.
	 */
	public void delete(ModifiedDataPk pk) throws ModifiedDataDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			if (logger.isDebugEnabled()) {
				logger.debug( "Executing " + SQL_DELETE + " with PK: " + pk);
			}
		
			stmt = conn.prepareStatement( SQL_DELETE );
			stmt.setLong( 1, pk.getModifiedDataId() );
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			if (logger.isDebugEnabled()) {
				logger.debug( rows + " rows affected (" + (t2-t1) + " ms)");
			}
		
		}
		catch (Exception _e) {
			logger.error( "Exception: " + _e.getMessage(), _e );
			throw new ModifiedDataDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns the rows from the MODIFIED_DATA table that matches the specified primary-key value.
	 */
	public ModifiedData findByPrimaryKey(ModifiedDataPk pk) throws ModifiedDataDaoException
	{
		return findByPrimaryKey( pk.getModifiedDataId() );
	}

	/** 
	 * Returns all rows from the MODIFIED_DATA table that match the criteria 'MODIFIED_DATA_ID = :modifiedDataId'.
	 */
	public ModifiedData findByPrimaryKey(long modifiedDataId) throws ModifiedDataDaoException
	{
		ModifiedData ret[] = findByDynamicSelect( SQL_SELECT + " WHERE MODIFIED_DATA_ID = ?", new Object[] {  new Long(modifiedDataId) } );
		return ret.length==0 ? null : ret[0];
	}

	/** 
	 * Returns all rows from the MODIFIED_DATA table that match the criteria ''.
	 */
	public ModifiedData[] findAll() throws ModifiedDataDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " ORDER BY MODIFIED_DATA_ID", null );
	}

	/** 
	 * Returns all rows from the MODIFIED_DATA table that match the criteria 'MODIFIED_DATA_ID = :modifiedDataId'.
	 */
	public ModifiedData[] findWhereModifiedDataIdEquals(long modifiedDataId) throws ModifiedDataDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE MODIFIED_DATA_ID = ? ORDER BY MODIFIED_DATA_ID", new Object[] {  new Long(modifiedDataId) } );
	}

	/** 
	 * Returns all rows from the MODIFIED_DATA table that match the criteria 'CUSTOMER_ID = :customerId'.
	 */
	public ModifiedData[] findWhereCustomerIdEquals(long customerId) throws ModifiedDataDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE CUSTOMER_ID = ? ORDER BY CUSTOMER_ID", new Object[] {  new Long(customerId) } );
	}

	/** 
	 * Returns all rows from the MODIFIED_DATA table that match the criteria 'MODIFIED_TIME = :modifiedTime'.
	 */
	public ModifiedData[] findWhereModifiedTimeEquals(Date modifiedTime) throws ModifiedDataDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE MODIFIED_TIME = ? ORDER BY MODIFIED_TIME", new Object[] { modifiedTime==null ? null : new java.sql.Timestamp( modifiedTime.getTime() ) } );
	}

	/**
	 * Method 'ModifiedDataDaoImpl'
	 * 
	 */
	public ModifiedDataDaoImpl()
	{
	}

	/**
	 * Method 'ModifiedDataDaoImpl'
	 * 
	 * @param userConn
	 */
	public ModifiedDataDaoImpl(final java.sql.Connection userConn)
	{
		this.userConn = userConn;
	}

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows)
	{
		this.maxRows = maxRows;
	}

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows()
	{
		return maxRows;
	}

	/**
	 * Method 'getTableName'
	 * 
	 * @return String
	 */
	public String getTableName()
	{
		return "MODIFIED_DATA";
	}

	/** 
	 * Fetches a single row from the result set
	 */
	protected ModifiedData fetchSingleResult(ResultSet rs) throws SQLException
	{
		if (rs.next()) {
			ModifiedData dto = new ModifiedData();
			populateDto( dto, rs);
			return dto;
		} else {
			return null;
		}
		
	}

	/** 
	 * Fetches multiple rows from the result set
	 */
	protected ModifiedData[] fetchMultiResults(ResultSet rs) throws SQLException
	{
		Collection resultList = new ArrayList();
		while (rs.next()) {
			ModifiedData dto = new ModifiedData();
			populateDto( dto, rs);
			resultList.add( dto );
		}
		
		ModifiedData ret[] = new ModifiedData[ resultList.size() ];
		resultList.toArray( ret );
		return ret;
	}

	/** 
	 * Populates a DTO with data from a ResultSet
	 */
	protected void populateDto(ModifiedData dto, ResultSet rs) throws SQLException
	{
		dto.setModifiedDataId( rs.getLong( COLUMN_MODIFIED_DATA_ID ) );
		dto.setCustomerId( rs.getLong( COLUMN_CUSTOMER_ID ) );
		dto.setModifiedTime( rs.getTimestamp(COLUMN_MODIFIED_TIME ) );
	}

	/** 
	 * Returns all rows from the MODIFIED_DATA table that match the specified arbitrary SQL statement
	 */
	public ModifiedData[] findByDynamicSelect(String sql, Object[] sqlParams) throws ModifiedDataDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = sql;
		
		
			if (logger.isDebugEnabled()) {
				logger.debug( "Executing " + SQL);
			}
		
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			logger.error( "Exception: " + _e.getMessage(), _e );
			throw new ModifiedDataDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns all rows from the MODIFIED_DATA table that match the specified arbitrary SQL statement
	 */
	public ModifiedData[] findByDynamicWhere(String sql, Object[] sqlParams) throws ModifiedDataDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = SQL_SELECT + " WHERE " + sql;
		
		
			if (logger.isDebugEnabled()) {
				logger.debug( "Executing " + SQL);
			}
		
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			logger.error( "Exception: " + _e.getMessage(), _e );
			throw new ModifiedDataDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

}
