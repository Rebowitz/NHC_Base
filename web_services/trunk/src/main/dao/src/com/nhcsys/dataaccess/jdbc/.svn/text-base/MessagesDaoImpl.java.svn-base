/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package com.nhcsys.dataaccess.jdbc;

import com.nhcsys.dataaccess.dao.*;
import com.nhcsys.dataaccess.factory.*;
import java.util.Date;
import com.nhcsys.dataaccess.dto.*;
import com.nhcsys.dataaccess.exceptions.*;
import java.sql.Connection;
import java.util.Collection;
import org.apache.log4j.Logger;
import java.sql.PreparedStatement;
import java.sql.Statement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Time;
import java.util.List;
import java.util.Iterator;
import java.util.ArrayList;

public class MessagesDaoImpl extends AbstractDAO implements MessagesDao
{
	/** 
	 * The factory class for this DAO has two versions of the create() method - one that
takes no arguments and one that takes a Connection argument. If the Connection version
is chosen then the connection will be stored in this attribute and will be used by all
calls to this DAO, otherwise a new Connection will be allocated for each operation.
	 */
	protected java.sql.Connection userConn;

	protected static final Logger logger = Logger.getLogger( MessagesDaoImpl.class );

	/** 
	 * All finder methods in this class use this SELECT constant to build their queries
	 */
	protected final String SQL_SELECT = "SELECT MESSAGE_ID, TYPE, START_TIME, END_TIME, MOD_TIME, TITLE, CONTENTS, SUMMARY, PRIORITY, POPUP_DURATION, CLICK_DESTINATION_URL, DESTINATION, GROUP_NAME, VIVE_ID FROM " + getTableName() + "";

	/** 
	 * Finder methods will pass this value to the JDBC setMaxRows method
	 */
	private int maxRows;

	/** 
	 * SQL INSERT statement for this table
	 */
	protected final String SQL_INSERT = "INSERT INTO " + getTableName() + " ( MESSAGE_ID, TYPE, START_TIME, END_TIME, MOD_TIME, TITLE, CONTENTS, SUMMARY, PRIORITY, POPUP_DURATION, CLICK_DESTINATION_URL, DESTINATION, GROUP_NAME, VIVE_ID ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ? )";

	/** 
	 * SQL UPDATE statement for this table
	 */
	protected final String SQL_UPDATE = "UPDATE " + getTableName() + " SET MESSAGE_ID = ?, TYPE = ?, START_TIME = ?, END_TIME = ?, MOD_TIME = ?, TITLE = ?, CONTENTS = ?, SUMMARY = ?, PRIORITY = ?, POPUP_DURATION = ?, CLICK_DESTINATION_URL = ?, DESTINATION = ?, GROUP_NAME = ?, VIVE_ID = ? WHERE MESSAGE_ID = ?";

	/** 
	 * SQL DELETE statement for this table
	 */
	protected final String SQL_DELETE = "DELETE FROM " + getTableName() + " WHERE MESSAGE_ID = ?";

	/** 
	 * Index of column MESSAGE_ID
	 */
	protected static final int COLUMN_MESSAGE_ID = 1;

	/** 
	 * Index of column TYPE
	 */
	protected static final int COLUMN_TYPE = 2;

	/** 
	 * Index of column START_TIME
	 */
	protected static final int COLUMN_START_TIME = 3;

	/** 
	 * Index of column END_TIME
	 */
	protected static final int COLUMN_END_TIME = 4;

	/** 
	 * Index of column MOD_TIME
	 */
	protected static final int COLUMN_MOD_TIME = 5;

	/** 
	 * Index of column TITLE
	 */
	protected static final int COLUMN_TITLE = 6;

	/** 
	 * Index of column CONTENTS
	 */
	protected static final int COLUMN_CONTENTS = 7;

	/** 
	 * Index of column SUMMARY
	 */
	protected static final int COLUMN_SUMMARY = 8;

	/** 
	 * Index of column PRIORITY
	 */
	protected static final int COLUMN_PRIORITY = 9;

	/** 
	 * Index of column POPUP_DURATION
	 */
	protected static final int COLUMN_POPUP_DURATION = 10;

	/** 
	 * Index of column CLICK_DESTINATION_URL
	 */
	protected static final int COLUMN_CLICK_DESTINATION_URL = 11;

	/** 
	 * Index of column DESTINATION
	 */
	protected static final int COLUMN_DESTINATION = 12;

	/** 
	 * Index of column GROUP_NAME
	 */
	protected static final int COLUMN_GROUP_NAME = 13;

	/** 
	 * Index of column VIVE_ID
	 */
	protected static final int COLUMN_VIVE_ID = 14;

	/** 
	 * Number of columns
	 */
	protected static final int NUMBER_OF_COLUMNS = 14;

	/** 
	 * Index of primary-key column MESSAGE_ID
	 */
	protected static final int PK_COLUMN_MESSAGE_ID = 1;

	/** 
	 * Inserts a new row in the MESSAGES table.
	 */
	public MessagesPk insert(Messages dto) throws MessagesDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			stmt = conn.prepareStatement( "SELECT message_id_seq.NEXTVAL FROM DUAL" );
			rs = stmt.executeQuery();
			if (rs.next()) {
				dto.setMessageId( rs.getLong( 1 ) );
				rs.close();
				stmt.close();
			}
		
			StringBuffer sql = new StringBuffer();
			sql.append( "INSERT INTO " + getTableName() + " (" );
			int modifiedCount = 0;
			if (dto.isMessageIdModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
				}
		
				sql.append( "MESSAGE_ID" );
				modifiedCount++;
			}
		
			if (dto.isTypeModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
				}
		
				sql.append( "TYPE" );
				modifiedCount++;
			}
		
			if (dto.isStartTimeModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
				}
		
				sql.append( "START_TIME" );
				modifiedCount++;
			}
		
			if (dto.isEndTimeModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
				}
		
				sql.append( "END_TIME" );
				modifiedCount++;
			}
		
			if (dto.isModTimeModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
				}
		
				sql.append( "MOD_TIME" );
				modifiedCount++;
			}
		
			if (dto.isTitleModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
				}
		
				sql.append( "TITLE" );
				modifiedCount++;
			}
		
			if (dto.isContentsModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
				}
		
				sql.append( "CONTENTS" );
				modifiedCount++;
			}
		
			if (dto.isSummaryModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
				}
		
				sql.append( "SUMMARY" );
				modifiedCount++;
			}
		
			if (dto.isPriorityModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
				}
		
				sql.append( "PRIORITY" );
				modifiedCount++;
			}
		
			if (dto.isPopupDurationModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
				}
		
				sql.append( "POPUP_DURATION" );
				modifiedCount++;
			}
		
			if (dto.isClickDestinationUrlModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
				}
		
				sql.append( "CLICK_DESTINATION_URL" );
				modifiedCount++;
			}
		
			if (dto.isDestinationModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
				}
		
				sql.append( "DESTINATION" );
				modifiedCount++;
			}
		
			if (dto.isGroupNameModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
				}
		
				sql.append( "GROUP_NAME" );
				modifiedCount++;
			}
		
			if (dto.isViveIdModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
				}
		
				sql.append( "VIVE_ID" );
				modifiedCount++;
			}
		
			if (modifiedCount==0) {
				// nothing to insert
				throw new IllegalStateException( "Nothing to insert" );
			}
		
			sql.append( ") VALUES (" );
			for (int i=0; i<modifiedCount; i++ ) {
				if (i>0) {
					sql.append( "," );
				}
		
				sql.append( "?" );
			}
		
			sql.append( ")" );
			stmt = conn.prepareStatement( sql.toString() );
			int index = 1;
			if (dto.isMessageIdModified()) {
				stmt.setLong( index++, dto.getMessageId() );
			}
		
			if (dto.isTypeModified()) {
				stmt.setString( index++, dto.getType() );
			}
		
			if (dto.isStartTimeModified()) {
				stmt.setTimestamp(index++, dto.getStartTime()==null ? null : new java.sql.Timestamp( dto.getStartTime().getTime() ) );
			}
		
			if (dto.isEndTimeModified()) {
				stmt.setTimestamp(index++, dto.getEndTime()==null ? null : new java.sql.Timestamp( dto.getEndTime().getTime() ) );
			}
		
			if (dto.isModTimeModified()) {
				stmt.setTimestamp(index++, dto.getModTime()==null ? null : new java.sql.Timestamp( dto.getModTime().getTime() ) );
			}
		
			if (dto.isTitleModified()) {
				stmt.setString( index++, dto.getTitle() );
			}
		
			if (dto.isContentsModified()) {
				stmt.setString( index++, dto.getContents() );
			}
		
			if (dto.isSummaryModified()) {
				stmt.setString( index++, dto.getSummary() );
			}
		
			if (dto.isPriorityModified()) {
				stmt.setString( index++, dto.getPriority() );
			}
		
			if (dto.isPopupDurationModified()) {
				stmt.setLong( index++, dto.getPopupDuration() );
			}
		
			if (dto.isClickDestinationUrlModified()) {
				stmt.setString( index++, dto.getClickDestinationUrl() );
			}
		
			if (dto.isDestinationModified()) {
				stmt.setString( index++, dto.getDestination() );
			}
		
			if (dto.isGroupNameModified()) {
				stmt.setString( index++, dto.getGroupName() );
			}
		
			if (dto.isViveIdModified()) {
				stmt.setString( index++, dto.getViveId() );
			}
		
			if (logger.isDebugEnabled()) {
				logger.debug( "Executing " + sql.toString() + " with values: " + dto);
			}
		
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			if (logger.isDebugEnabled()) {
				logger.debug( rows + " rows affected (" + (t2-t1) + " ms)");
			}
		
			return dto.createPk();
		}
		catch (Exception _e) {
			logger.error( "Exception: " + _e.getMessage(), _e );
			throw new MessagesDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Updates a single row in the MESSAGES table.
	 */
	public void update(MessagesPk pk, Messages dto) throws MessagesDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			StringBuffer sql = new StringBuffer();
			sql.append( "UPDATE " + getTableName() + " SET " );
			boolean modified = false;
			if (dto.isMessageIdModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "MESSAGE_ID=?" );
				modified=true;
			}
		
			if (dto.isTypeModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "TYPE=?" );
				modified=true;
			}
		
			if (dto.isStartTimeModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "START_TIME=?" );
				modified=true;
			}
		
			if (dto.isEndTimeModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "END_TIME=?" );
				modified=true;
			}
		
			if (dto.isModTimeModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "MOD_TIME=?" );
				modified=true;
			}
		
			if (dto.isTitleModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "TITLE=?" );
				modified=true;
			}
		
			if (dto.isContentsModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "CONTENTS=?" );
				modified=true;
			}
		
			if (dto.isSummaryModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "SUMMARY=?" );
				modified=true;
			}
		
			if (dto.isPriorityModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "PRIORITY=?" );
				modified=true;
			}
		
			if (dto.isPopupDurationModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "POPUP_DURATION=?" );
				modified=true;
			}
		
			if (dto.isClickDestinationUrlModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "CLICK_DESTINATION_URL=?" );
				modified=true;
			}
		
			if (dto.isDestinationModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "DESTINATION=?" );
				modified=true;
			}
		
			if (dto.isGroupNameModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "GROUP_NAME=?" );
				modified=true;
			}
		
			if (dto.isViveIdModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "VIVE_ID=?" );
				modified=true;
			}
		
			if (!modified) {
				// nothing to update
				return;
			}
		
			sql.append( " WHERE MESSAGE_ID=?" );
			if (logger.isDebugEnabled()) {
				logger.debug( "Executing " + sql.toString() + " with values: " + dto);
			}
		
			stmt = conn.prepareStatement( sql.toString() );
			int index = 1;
			if (dto.isMessageIdModified()) {
				stmt.setLong( index++, dto.getMessageId() );
			}
		
			if (dto.isTypeModified()) {
				stmt.setString( index++, dto.getType() );
			}
		
			if (dto.isStartTimeModified()) {
				stmt.setTimestamp(index++, dto.getStartTime()==null ? null : new java.sql.Timestamp( dto.getStartTime().getTime() ) );
			}
		
			if (dto.isEndTimeModified()) {
				stmt.setTimestamp(index++, dto.getEndTime()==null ? null : new java.sql.Timestamp( dto.getEndTime().getTime() ) );
			}
		
			if (dto.isModTimeModified()) {
				stmt.setTimestamp(index++, dto.getModTime()==null ? null : new java.sql.Timestamp( dto.getModTime().getTime() ) );
			}
		
			if (dto.isTitleModified()) {
				stmt.setString( index++, dto.getTitle() );
			}
		
			if (dto.isContentsModified()) {
				stmt.setString( index++, dto.getContents() );
			}
		
			if (dto.isSummaryModified()) {
				stmt.setString( index++, dto.getSummary() );
			}
		
			if (dto.isPriorityModified()) {
				stmt.setString( index++, dto.getPriority() );
			}
		
			if (dto.isPopupDurationModified()) {
				stmt.setLong( index++, dto.getPopupDuration() );
			}
		
			if (dto.isClickDestinationUrlModified()) {
				stmt.setString( index++, dto.getClickDestinationUrl() );
			}
		
			if (dto.isDestinationModified()) {
				stmt.setString( index++, dto.getDestination() );
			}
		
			if (dto.isGroupNameModified()) {
				stmt.setString( index++, dto.getGroupName() );
			}
		
			if (dto.isViveIdModified()) {
				stmt.setString( index++, dto.getViveId() );
			}
		
			stmt.setLong( index++, pk.getMessageId() );
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			if (logger.isDebugEnabled()) {
				logger.debug( rows + " rows affected (" + (t2-t1) + " ms)");
			}
		
		}
		catch (Exception _e) {
			logger.error( "Exception: " + _e.getMessage(), _e );
			throw new MessagesDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Deletes a single row in the MESSAGES table.
	 */
	public void delete(MessagesPk pk) throws MessagesDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			if (logger.isDebugEnabled()) {
				logger.debug( "Executing " + SQL_DELETE + " with PK: " + pk);
			}
		
			stmt = conn.prepareStatement( SQL_DELETE );
			stmt.setLong( 1, pk.getMessageId() );
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			if (logger.isDebugEnabled()) {
				logger.debug( rows + " rows affected (" + (t2-t1) + " ms)");
			}
		
		}
		catch (Exception _e) {
			logger.error( "Exception: " + _e.getMessage(), _e );
			throw new MessagesDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns the rows from the MESSAGES table that matches the specified primary-key value.
	 */
	public Messages findByPrimaryKey(MessagesPk pk) throws MessagesDaoException
	{
		return findByPrimaryKey( pk.getMessageId() );
	}

	/** 
	 * Returns all rows from the MESSAGES table that match the criteria 'MESSAGE_ID = :messageId'.
	 */
	public Messages findByPrimaryKey(long messageId) throws MessagesDaoException
	{
		Messages ret[] = findByDynamicSelect( SQL_SELECT + " WHERE MESSAGE_ID = ?", new Object[] {  new Long(messageId) } );
		return ret.length==0 ? null : ret[0];
	}

	/** 
	 * Returns all rows from the MESSAGES table that match the criteria ''.
	 */
	public Messages[] findAll() throws MessagesDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " ORDER BY MESSAGE_ID", null );
	}

	/** 
	 * Returns all rows from the MESSAGES table that match the criteria 'MESSAGE_ID = :messageId'.
	 */
	public Messages[] findWhereMessageIdEquals(long messageId) throws MessagesDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE MESSAGE_ID = ? ORDER BY MESSAGE_ID", new Object[] {  new Long(messageId) } );
	}

	/** 
	 * Returns all rows from the MESSAGES table that match the criteria 'TYPE = :type'.
	 */
	public Messages[] findWhereTypeEquals(String type) throws MessagesDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE TYPE = ? ORDER BY TYPE", new Object[] { type } );
	}

	/** 
	 * Returns all rows from the MESSAGES table that match the criteria 'START_TIME = :startTime'.
	 */
	public Messages[] findWhereStartTimeEquals(Date startTime) throws MessagesDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE START_TIME = ? ORDER BY START_TIME", new Object[] { startTime==null ? null : new java.sql.Timestamp( startTime.getTime() ) } );
	}

	/** 
	 * Returns all rows from the MESSAGES table that match the criteria 'END_TIME = :endTime'.
	 */
	public Messages[] findWhereEndTimeEquals(Date endTime) throws MessagesDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE END_TIME = ? ORDER BY END_TIME", new Object[] { endTime==null ? null : new java.sql.Timestamp( endTime.getTime() ) } );
	}

	/** 
	 * Returns all rows from the MESSAGES table that match the criteria 'MOD_TIME = :modTime'.
	 */
	public Messages[] findWhereModTimeEquals(Date modTime) throws MessagesDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE MOD_TIME = ? ORDER BY MOD_TIME", new Object[] { modTime==null ? null : new java.sql.Timestamp( modTime.getTime() ) } );
	}

	/** 
	 * Returns all rows from the MESSAGES table that match the criteria 'TITLE = :title'.
	 */
	public Messages[] findWhereTitleEquals(String title) throws MessagesDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE TITLE = ? ORDER BY TITLE", new Object[] { title } );
	}

	/** 
	 * Returns all rows from the MESSAGES table that match the criteria 'CONTENTS = :contents'.
	 */
	public Messages[] findWhereContentsEquals(String contents) throws MessagesDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE CONTENTS = ? ORDER BY CONTENTS", new Object[] { contents } );
	}

	/** 
	 * Returns all rows from the MESSAGES table that match the criteria 'SUMMARY = :summary'.
	 */
	public Messages[] findWhereSummaryEquals(String summary) throws MessagesDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE SUMMARY = ? ORDER BY SUMMARY", new Object[] { summary } );
	}

	/** 
	 * Returns all rows from the MESSAGES table that match the criteria 'PRIORITY = :priority'.
	 */
	public Messages[] findWherePriorityEquals(String priority) throws MessagesDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE PRIORITY = ? ORDER BY PRIORITY", new Object[] { priority } );
	}

	/** 
	 * Returns all rows from the MESSAGES table that match the criteria 'POPUP_DURATION = :popupDuration'.
	 */
	public Messages[] findWherePopupDurationEquals(long popupDuration) throws MessagesDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE POPUP_DURATION = ? ORDER BY POPUP_DURATION", new Object[] {  new Long(popupDuration) } );
	}

	/** 
	 * Returns all rows from the MESSAGES table that match the criteria 'CLICK_DESTINATION_URL = :clickDestinationUrl'.
	 */
	public Messages[] findWhereClickDestinationUrlEquals(String clickDestinationUrl) throws MessagesDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE CLICK_DESTINATION_URL = ? ORDER BY CLICK_DESTINATION_URL", new Object[] { clickDestinationUrl } );
	}

	/** 
	 * Returns all rows from the MESSAGES table that match the criteria 'DESTINATION = :destination'.
	 */
	public Messages[] findWhereDestinationEquals(String destination) throws MessagesDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE DESTINATION = ? ORDER BY DESTINATION", new Object[] { destination } );
	}

	/** 
	 * Returns all rows from the MESSAGES table that match the criteria 'GROUP_NAME = :groupName'.
	 */
	public Messages[] findWhereGroupNameEquals(String groupName) throws MessagesDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE GROUP_NAME = ? ORDER BY GROUP_NAME", new Object[] { groupName } );
	}

	/** 
	 * Returns all rows from the MESSAGES table that match the criteria 'VIVE_ID = :viveId'.
	 */
	public Messages[] findWhereViveIdEquals(String viveId) throws MessagesDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE VIVE_ID = ? ORDER BY VIVE_ID", new Object[] { viveId } );
	}

	/**
	 * Method 'MessagesDaoImpl'
	 * 
	 */
	public MessagesDaoImpl()
	{
	}

	/**
	 * Method 'MessagesDaoImpl'
	 * 
	 * @param userConn
	 */
	public MessagesDaoImpl(final java.sql.Connection userConn)
	{
		this.userConn = userConn;
	}

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows)
	{
		this.maxRows = maxRows;
	}

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows()
	{
		return maxRows;
	}

	/**
	 * Method 'getTableName'
	 * 
	 * @return String
	 */
	public String getTableName()
	{
		return "MESSAGES";
	}

	/** 
	 * Fetches a single row from the result set
	 */
	protected Messages fetchSingleResult(ResultSet rs) throws SQLException
	{
		if (rs.next()) {
			Messages dto = new Messages();
			populateDto( dto, rs);
			return dto;
		} else {
			return null;
		}
		
	}

	/** 
	 * Fetches multiple rows from the result set
	 */
	protected Messages[] fetchMultiResults(ResultSet rs) throws SQLException
	{
		Collection resultList = new ArrayList();
		while (rs.next()) {
			Messages dto = new Messages();
			populateDto( dto, rs);
			resultList.add( dto );
		}
		
		Messages ret[] = new Messages[ resultList.size() ];
		resultList.toArray( ret );
		return ret;
	}

	/** 
	 * Populates a DTO with data from a ResultSet
	 */
	protected void populateDto(Messages dto, ResultSet rs) throws SQLException
	{
		dto.setMessageId( rs.getLong( COLUMN_MESSAGE_ID ) );
		dto.setType( rs.getString( COLUMN_TYPE ) );
		dto.setStartTime( rs.getTimestamp(COLUMN_START_TIME ) );
		dto.setEndTime( rs.getTimestamp(COLUMN_END_TIME ) );
		dto.setModTime( rs.getTimestamp(COLUMN_MOD_TIME ) );
		dto.setTitle( rs.getString( COLUMN_TITLE ) );
		dto.setContents( rs.getString( COLUMN_CONTENTS ) );
		dto.setSummary( rs.getString( COLUMN_SUMMARY ) );
		dto.setPriority( rs.getString( COLUMN_PRIORITY ) );
		dto.setPopupDuration( rs.getLong( COLUMN_POPUP_DURATION ) );
		dto.setClickDestinationUrl( rs.getString( COLUMN_CLICK_DESTINATION_URL ) );
		dto.setDestination( rs.getString( COLUMN_DESTINATION ) );
		dto.setGroupName( rs.getString( COLUMN_GROUP_NAME ) );
		dto.setViveId( rs.getString( COLUMN_VIVE_ID ) );
	}

	/** 
	 * Returns all rows from the MESSAGES table that match the specified arbitrary SQL statement
	 */
	public Messages[] findByDynamicSelect(String sql, Object[] sqlParams) throws MessagesDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = sql;
		
		
			if (logger.isDebugEnabled()) {
				logger.debug( "Executing " + SQL);
			}
		
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			logger.error( "Exception: " + _e.getMessage(), _e );
			throw new MessagesDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns all rows from the MESSAGES table that match the specified arbitrary SQL statement
	 */
	public Messages[] findByDynamicWhere(String sql, Object[] sqlParams) throws MessagesDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = SQL_SELECT + " WHERE " + sql;
		
		
			if (logger.isDebugEnabled()) {
				logger.debug( "Executing " + SQL);
			}
		
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			logger.error( "Exception: " + _e.getMessage(), _e );
			throw new MessagesDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

}
