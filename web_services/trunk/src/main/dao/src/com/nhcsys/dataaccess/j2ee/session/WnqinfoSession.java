/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package com.nhcsys.dataaccess.j2ee.session;

import com.nhcsys.dataaccess.factory.*;
import com.nhcsys.dataaccess.dao.*;
import com.nhcsys.dataaccess.dto.*;
import com.nhcsys.dataaccess.exceptions.*;
import java.rmi.RemoteException;
import java.math.*;
import java.util.Date;
import javax.ejb.*;

public interface WnqinfoSession extends EJBObject
{
	/** 
	 * Inserts a new row in the WNQINFO table.
	 */
	public WnqinfoPk insert(Wnqinfo dto) throws WnqinfoDaoException, RemoteException;

	/** 
	 * Updates a single row in the WNQINFO table.
	 */
	public void update(WnqinfoPk pk, Wnqinfo dto) throws WnqinfoDaoException, RemoteException;

	/** 
	 * Deletes a single row in the WNQINFO table.
	 */
	public void delete(WnqinfoPk pk) throws WnqinfoDaoException, RemoteException;

	/** 
	 * Returns the rows from the WNQINFO table that matches the specified primary-key value.
	 */
	public Wnqinfo findByPrimaryKey(WnqinfoPk pk) throws WnqinfoDaoException, RemoteException;

	/**
	 * Method 'findByPrimaryKey'
	 * 
	 * @param wnqinfoId
	 * @throws WnqinfoDaoException
	 * @throws RemoteException
	 * @return Wnqinfo
	 */
	public Wnqinfo findByPrimaryKey(long wnqinfoId) throws WnqinfoDaoException, RemoteException;

	/**
	 * Method 'findAll'
	 * 
	 * @throws WnqinfoDaoException
	 * @throws RemoteException
	 * @return Wnqinfo[]
	 */
	public Wnqinfo[] findAll() throws WnqinfoDaoException, RemoteException;

	/**
	 * Method 'findWhereWnqinfoIdEquals'
	 * 
	 * @param wnqinfoId
	 * @throws WnqinfoDaoException
	 * @throws RemoteException
	 * @return Wnqinfo[]
	 */
	public Wnqinfo[] findWhereWnqinfoIdEquals(long wnqinfoId) throws WnqinfoDaoException, RemoteException;

	/**
	 * Method 'findWhereNetworkinfoIdEquals'
	 * 
	 * @param networkinfoId
	 * @throws WnqinfoDaoException
	 * @throws RemoteException
	 * @return Wnqinfo[]
	 */
	public Wnqinfo[] findWhereNetworkinfoIdEquals(long networkinfoId) throws WnqinfoDaoException, RemoteException;

	/**
	 * Method 'findWhereProviderEquals'
	 * 
	 * @param provider
	 * @throws WnqinfoDaoException
	 * @throws RemoteException
	 * @return Wnqinfo[]
	 */
	public Wnqinfo[] findWhereProviderEquals(String provider) throws WnqinfoDaoException, RemoteException;

	/**
	 * Method 'findWhereRemotenameEquals'
	 * 
	 * @param remotename
	 * @throws WnqinfoDaoException
	 * @throws RemoteException
	 * @return Wnqinfo[]
	 */
	public Wnqinfo[] findWhereRemotenameEquals(String remotename) throws WnqinfoDaoException, RemoteException;

	/**
	 * Method 'findWhereLocalnameEquals'
	 * 
	 * @param localname
	 * @throws WnqinfoDaoException
	 * @throws RemoteException
	 * @return Wnqinfo[]
	 */
	public Wnqinfo[] findWhereLocalnameEquals(String localname) throws WnqinfoDaoException, RemoteException;

	/**
	 * Method 'findWhereIpaddressEquals'
	 * 
	 * @param ipaddress
	 * @throws WnqinfoDaoException
	 * @throws RemoteException
	 * @return Wnqinfo[]
	 */
	public Wnqinfo[] findWhereIpaddressEquals(String ipaddress) throws WnqinfoDaoException, RemoteException;

	/**
	 * Method 'findWhereWnqcommentEquals'
	 * 
	 * @param wnqcomment
	 * @throws WnqinfoDaoException
	 * @throws RemoteException
	 * @return Wnqinfo[]
	 */
	public Wnqinfo[] findWhereWnqcommentEquals(String wnqcomment) throws WnqinfoDaoException, RemoteException;

	/**
	 * Method 'findWhereDisplaytypeEquals'
	 * 
	 * @param displaytype
	 * @throws WnqinfoDaoException
	 * @throws RemoteException
	 * @return Wnqinfo[]
	 */
	public Wnqinfo[] findWhereDisplaytypeEquals(String displaytype) throws WnqinfoDaoException, RemoteException;

	/**
	 * Method 'findWhereWnqscopeEquals'
	 * 
	 * @param wnqscope
	 * @throws WnqinfoDaoException
	 * @throws RemoteException
	 * @return Wnqinfo[]
	 */
	public Wnqinfo[] findWhereWnqscopeEquals(String wnqscope) throws WnqinfoDaoException, RemoteException;

	/**
	 * Method 'findWhereWnqtypeEquals'
	 * 
	 * @param wnqtype
	 * @throws WnqinfoDaoException
	 * @throws RemoteException
	 * @return Wnqinfo[]
	 */
	public Wnqinfo[] findWhereWnqtypeEquals(String wnqtype) throws WnqinfoDaoException, RemoteException;

	/**
	 * Method 'findWhereWnqusageEquals'
	 * 
	 * @param wnqusage
	 * @throws WnqinfoDaoException
	 * @throws RemoteException
	 * @return Wnqinfo[]
	 */
	public Wnqinfo[] findWhereWnqusageEquals(String wnqusage) throws WnqinfoDaoException, RemoteException;

	/**
	 * Method 'findByDynamicSelect'
	 * 
	 * @param sql
	 * @param arg
	 * @throws WnqinfoDaoException
	 * @throws RemoteException
	 * @return Wnqinfo[]
	 */
	public Wnqinfo[] findByDynamicSelect(String sql, Object[] arg) throws WnqinfoDaoException, RemoteException;

	/**
	 * Method 'findByDynamicWhere'
	 * 
	 * @param sql
	 * @param arg
	 * @throws WnqinfoDaoException
	 * @throws RemoteException
	 * @return Wnqinfo[]
	 */
	public Wnqinfo[] findByDynamicWhere(String sql, Object[] arg) throws WnqinfoDaoException, RemoteException;

}
