/*
 * This source file was generated by FireStorm/DAO.
 * 
 * If you purchase a full license for FireStorm/DAO you can customize this header file.
 * 
 * For more information please visit http://www.codefutures.com/products/firestorm
 */

package com.nhcsys.dataaccess.jdbc;

import com.nhcsys.dataaccess.dao.*;
import com.nhcsys.dataaccess.factory.*;
import com.nhcsys.dataaccess.dto.*;
import com.nhcsys.dataaccess.exceptions.*;
import java.sql.Connection;
import java.util.Collection;
import org.apache.log4j.Logger;
import java.sql.PreparedStatement;
import java.sql.Statement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Time;
import java.util.List;
import java.util.Iterator;
import java.util.ArrayList;

public class MachinesDaoImpl extends AbstractDAO implements MachinesDao
{
	/** 
	 * The factory class for this DAO has two versions of the create() method - one that
takes no arguments and one that takes a Connection argument. If the Connection version
is chosen then the connection will be stored in this attribute and will be used by all
calls to this DAO, otherwise a new Connection will be allocated for each operation.
	 */
	protected java.sql.Connection userConn;

	protected static final Logger logger = Logger.getLogger( MachinesDaoImpl.class );

	/** 
	 * All finder methods in this class use this SELECT constant to build their queries
	 */
	protected final String SQL_SELECT = "SELECT MACHINE_ID, CUSTOMER_ID, VIVE_ID, CPU_SERIAL_NO, KEY_DATA, KEY_TIMESTAMP, STOLEN_FLAG, TERMINATE_FLAG, REGISTERED_FLAG FROM " + getTableName() + "";

	/** 
	 * Finder methods will pass this value to the JDBC setMaxRows method
	 */
	private int maxRows;

	/** 
	 * SQL INSERT statement for this table
	 */
	protected final String SQL_INSERT = "INSERT INTO " + getTableName() + " ( MACHINE_ID, CUSTOMER_ID, VIVE_ID, CPU_SERIAL_NO, KEY_DATA, KEY_TIMESTAMP, STOLEN_FLAG, TERMINATE_FLAG, REGISTERED_FLAG ) VALUES ( ?, ?, ?, ?, ?, ?, ?, ?, ? )";

	/** 
	 * SQL UPDATE statement for this table
	 */
	protected final String SQL_UPDATE = "UPDATE " + getTableName() + " SET MACHINE_ID = ?, CUSTOMER_ID = ?, VIVE_ID = ?, CPU_SERIAL_NO = ?, KEY_DATA = ?, KEY_TIMESTAMP = ?, STOLEN_FLAG = ?, TERMINATE_FLAG = ?, REGISTERED_FLAG = ? WHERE MACHINE_ID = ?";

	/** 
	 * SQL DELETE statement for this table
	 */
	protected final String SQL_DELETE = "DELETE FROM " + getTableName() + " WHERE MACHINE_ID = ?";

	/** 
	 * Index of column MACHINE_ID
	 */
	protected static final int COLUMN_MACHINE_ID = 1;

	/** 
	 * Index of column CUSTOMER_ID
	 */
	protected static final int COLUMN_CUSTOMER_ID = 2;

	/** 
	 * Index of column VIVE_ID
	 */
	protected static final int COLUMN_VIVE_ID = 3;

	/** 
	 * Index of column CPU_SERIAL_NO
	 */
	protected static final int COLUMN_CPU_SERIAL_NO = 4;

	/** 
	 * Index of column KEY_DATA
	 */
	protected static final int COLUMN_KEY_DATA = 5;

	/** 
	 * Index of column KEY_TIMESTAMP
	 */
	protected static final int COLUMN_KEY_TIMESTAMP = 6;

	/** 
	 * Index of column STOLEN_FLAG
	 */
	protected static final int COLUMN_STOLEN_FLAG = 7;

	/** 
	 * Index of column TERMINATE_FLAG
	 */
	protected static final int COLUMN_TERMINATE_FLAG = 8;

	/** 
	 * Index of column REGISTERED_FLAG
	 */
	protected static final int COLUMN_REGISTERED_FLAG = 9;

	/** 
	 * Number of columns
	 */
	protected static final int NUMBER_OF_COLUMNS = 9;

	/** 
	 * Index of primary-key column MACHINE_ID
	 */
	protected static final int PK_COLUMN_MACHINE_ID = 1;

	/** 
	 * Inserts a new row in the MACHINES table.
	 */
	public MachinesPk insert(Machines dto) throws MachinesDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			stmt = conn.prepareStatement( "SELECT machine_id_seq.NEXTVAL FROM DUAL" );
			rs = stmt.executeQuery();
			if (rs.next()) {
				dto.setMachineId( rs.getLong( 1 ) );
				rs.close();
				stmt.close();
			}
		
			StringBuffer sql = new StringBuffer();
			sql.append( "INSERT INTO " + getTableName() + " (" );
			int modifiedCount = 0;
			if (dto.isMachineIdModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
				}
		
				sql.append( "MACHINE_ID" );
				modifiedCount++;
			}
		
			if (dto.isCustomerIdModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
				}
		
				sql.append( "CUSTOMER_ID" );
				modifiedCount++;
			}
		
			if (dto.isViveIdModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
				}
		
				sql.append( "VIVE_ID" );
				modifiedCount++;
			}
		
			if (dto.isCpuSerialNoModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
				}
		
				sql.append( "CPU_SERIAL_NO" );
				modifiedCount++;
			}
		
			if (dto.isKeyDataModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
				}
		
				sql.append( "KEY_DATA" );
				modifiedCount++;
			}
		
			if (dto.isKeyTimestampModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
				}
		
				sql.append( "KEY_TIMESTAMP" );
				modifiedCount++;
			}
		
			if (dto.isStolenFlagModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
				}
		
				sql.append( "STOLEN_FLAG" );
				modifiedCount++;
			}
		
			if (dto.isTerminateFlagModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
				}
		
				sql.append( "TERMINATE_FLAG" );
				modifiedCount++;
			}
		
			if (dto.isRegisteredFlagModified()) {
				if (modifiedCount>0) {
					sql.append( ", " );
				}
		
				sql.append( "REGISTERED_FLAG" );
				modifiedCount++;
			}
		
			if (modifiedCount==0) {
				// nothing to insert
				throw new IllegalStateException( "Nothing to insert" );
			}
		
			sql.append( ") VALUES (" );
			for (int i=0; i<modifiedCount; i++ ) {
				if (i>0) {
					sql.append( "," );
				}
		
				sql.append( "?" );
			}
		
			sql.append( ")" );
			stmt = conn.prepareStatement( sql.toString() );
			int index = 1;
			if (dto.isMachineIdModified()) {
				stmt.setLong( index++, dto.getMachineId() );
			}
		
			if (dto.isCustomerIdModified()) {
				stmt.setLong( index++, dto.getCustomerId() );
			}
		
			if (dto.isViveIdModified()) {
				stmt.setString( index++, dto.getViveId() );
			}
		
			if (dto.isCpuSerialNoModified()) {
				stmt.setString( index++, dto.getCpuSerialNo() );
			}
		
			if (dto.isKeyDataModified()) {
				stmt.setString( index++, dto.getKeyData() );
			}
		
			if (dto.isKeyTimestampModified()) {
				stmt.setLong( index++, dto.getKeyTimestamp() );
			}
		
			if (dto.isStolenFlagModified()) {
				if (dto.isStolenFlagNull()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setInt( index++, dto.getStolenFlag() );
				}
		
			}
		
			if (dto.isTerminateFlagModified()) {
				if (dto.isTerminateFlagNull()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setInt( index++, dto.getTerminateFlag() );
				}
		
			}
		
			if (dto.isRegisteredFlagModified()) {
				if (dto.isRegisteredFlagNull()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setInt( index++, dto.getRegisteredFlag() );
				}
		
			}
		
			if (logger.isDebugEnabled()) {
				logger.debug( "Executing " + sql.toString() + " with values: " + dto);
			}
		
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			if (logger.isDebugEnabled()) {
				logger.debug( rows + " rows affected (" + (t2-t1) + " ms)");
			}
		
			return dto.createPk();
		}
		catch (Exception _e) {
			logger.error( "Exception: " + _e.getMessage(), _e );
			throw new MachinesDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Updates a single row in the MACHINES table.
	 */
	public void update(MachinesPk pk, Machines dto) throws MachinesDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			StringBuffer sql = new StringBuffer();
			sql.append( "UPDATE " + getTableName() + " SET " );
			boolean modified = false;
			if (dto.isMachineIdModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "MACHINE_ID=?" );
				modified=true;
			}
		
			if (dto.isCustomerIdModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "CUSTOMER_ID=?" );
				modified=true;
			}
		
			if (dto.isViveIdModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "VIVE_ID=?" );
				modified=true;
			}
		
			if (dto.isCpuSerialNoModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "CPU_SERIAL_NO=?" );
				modified=true;
			}
		
			if (dto.isKeyDataModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "KEY_DATA=?" );
				modified=true;
			}
		
			if (dto.isKeyTimestampModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "KEY_TIMESTAMP=?" );
				modified=true;
			}
		
			if (dto.isStolenFlagModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "STOLEN_FLAG=?" );
				modified=true;
			}
		
			if (dto.isTerminateFlagModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "TERMINATE_FLAG=?" );
				modified=true;
			}
		
			if (dto.isRegisteredFlagModified()) {
				if (modified) {
					sql.append( ", " );
				}
		
				sql.append( "REGISTERED_FLAG=?" );
				modified=true;
			}
		
			if (!modified) {
				// nothing to update
				return;
			}
		
			sql.append( " WHERE MACHINE_ID=?" );
			if (logger.isDebugEnabled()) {
				logger.debug( "Executing " + sql.toString() + " with values: " + dto);
			}
		
			stmt = conn.prepareStatement( sql.toString() );
			int index = 1;
			if (dto.isMachineIdModified()) {
				stmt.setLong( index++, dto.getMachineId() );
			}
		
			if (dto.isCustomerIdModified()) {
				stmt.setLong( index++, dto.getCustomerId() );
			}
		
			if (dto.isViveIdModified()) {
				stmt.setString( index++, dto.getViveId() );
			}
		
			if (dto.isCpuSerialNoModified()) {
				stmt.setString( index++, dto.getCpuSerialNo() );
			}
		
			if (dto.isKeyDataModified()) {
				stmt.setString( index++, dto.getKeyData() );
			}
		
			if (dto.isKeyTimestampModified()) {
				stmt.setLong( index++, dto.getKeyTimestamp() );
			}
		
			if (dto.isStolenFlagModified()) {
				if (dto.isStolenFlagNull()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setInt( index++, dto.getStolenFlag() );
				}
		
			}
		
			if (dto.isTerminateFlagModified()) {
				if (dto.isTerminateFlagNull()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setInt( index++, dto.getTerminateFlag() );
				}
		
			}
		
			if (dto.isRegisteredFlagModified()) {
				if (dto.isRegisteredFlagNull()) {
					stmt.setNull( index++, java.sql.Types.INTEGER );
				} else {
					stmt.setInt( index++, dto.getRegisteredFlag() );
				}
		
			}
		
			stmt.setLong( index++, pk.getMachineId() );
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			if (logger.isDebugEnabled()) {
				logger.debug( rows + " rows affected (" + (t2-t1) + " ms)");
			}
		
		}
		catch (Exception _e) {
			logger.error( "Exception: " + _e.getMessage(), _e );
			throw new MachinesDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Deletes a single row in the MACHINES table.
	 */
	public void delete(MachinesPk pk) throws MachinesDaoException
	{
		long t1 = System.currentTimeMillis();
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			if (logger.isDebugEnabled()) {
				logger.debug( "Executing " + SQL_DELETE + " with PK: " + pk);
			}
		
			stmt = conn.prepareStatement( SQL_DELETE );
			stmt.setLong( 1, pk.getMachineId() );
			int rows = stmt.executeUpdate();
			long t2 = System.currentTimeMillis();
			if (logger.isDebugEnabled()) {
				logger.debug( rows + " rows affected (" + (t2-t1) + " ms)");
			}
		
		}
		catch (Exception _e) {
			logger.error( "Exception: " + _e.getMessage(), _e );
			throw new MachinesDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns the rows from the MACHINES table that matches the specified primary-key value.
	 */
	public Machines findByPrimaryKey(MachinesPk pk) throws MachinesDaoException
	{
		return findByPrimaryKey( pk.getMachineId() );
	}

	/** 
	 * Returns all rows from the MACHINES table that match the criteria 'MACHINE_ID = :machineId'.
	 */
	public Machines findByPrimaryKey(long machineId) throws MachinesDaoException
	{
		Machines ret[] = findByDynamicSelect( SQL_SELECT + " WHERE MACHINE_ID = ?", new Object[] {  new Long(machineId) } );
		return ret.length==0 ? null : ret[0];
	}

	/** 
	 * Returns all rows from the MACHINES table that match the criteria ''.
	 */
	public Machines[] findAll() throws MachinesDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " ORDER BY MACHINE_ID", null );
	}

	/** 
	 * Returns all rows from the MACHINES table that match the criteria 'MACHINE_ID = :machineId'.
	 */
	public Machines[] findWhereMachineIdEquals(long machineId) throws MachinesDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE MACHINE_ID = ? ORDER BY MACHINE_ID", new Object[] {  new Long(machineId) } );
	}

	/** 
	 * Returns all rows from the MACHINES table that match the criteria 'CUSTOMER_ID = :customerId'.
	 */
	public Machines[] findWhereCustomerIdEquals(long customerId) throws MachinesDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE CUSTOMER_ID = ? ORDER BY CUSTOMER_ID", new Object[] {  new Long(customerId) } );
	}

	/** 
	 * Returns all rows from the MACHINES table that match the criteria 'VIVE_ID = :viveId'.
	 */
	public Machines[] findWhereViveIdEquals(String viveId) throws MachinesDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE VIVE_ID = ? ORDER BY VIVE_ID", new Object[] { viveId } );
	}

	/** 
	 * Returns all rows from the MACHINES table that match the criteria 'CPU_SERIAL_NO = :cpuSerialNo'.
	 */
	public Machines[] findWhereCpuSerialNoEquals(String cpuSerialNo) throws MachinesDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE CPU_SERIAL_NO = ? ORDER BY CPU_SERIAL_NO", new Object[] { cpuSerialNo } );
	}

	/** 
	 * Returns all rows from the MACHINES table that match the criteria 'KEY_DATA = :keyData'.
	 */
	public Machines[] findWhereKeyDataEquals(String keyData) throws MachinesDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE KEY_DATA = ? ORDER BY KEY_DATA", new Object[] { keyData } );
	}

	/** 
	 * Returns all rows from the MACHINES table that match the criteria 'KEY_TIMESTAMP = :keyTimestamp'.
	 */
	public Machines[] findWhereKeyTimestampEquals(long keyTimestamp) throws MachinesDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE KEY_TIMESTAMP = ? ORDER BY KEY_TIMESTAMP", new Object[] {  new Long(keyTimestamp) } );
	}

	/** 
	 * Returns all rows from the MACHINES table that match the criteria 'STOLEN_FLAG = :stolenFlag'.
	 */
	public Machines[] findWhereStolenFlagEquals(int stolenFlag) throws MachinesDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE STOLEN_FLAG = ? ORDER BY STOLEN_FLAG", new Object[] {  new Integer(stolenFlag) } );
	}

	/** 
	 * Returns all rows from the MACHINES table that match the criteria 'TERMINATE_FLAG = :terminateFlag'.
	 */
	public Machines[] findWhereTerminateFlagEquals(int terminateFlag) throws MachinesDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE TERMINATE_FLAG = ? ORDER BY TERMINATE_FLAG", new Object[] {  new Integer(terminateFlag) } );
	}

	/** 
	 * Returns all rows from the MACHINES table that match the criteria 'REGISTERED_FLAG = :registeredFlag'.
	 */
	public Machines[] findWhereRegisteredFlagEquals(int registeredFlag) throws MachinesDaoException
	{
		return findByDynamicSelect( SQL_SELECT + " WHERE REGISTERED_FLAG = ? ORDER BY REGISTERED_FLAG", new Object[] {  new Integer(registeredFlag) } );
	}

	/**
	 * Method 'MachinesDaoImpl'
	 * 
	 */
	public MachinesDaoImpl()
	{
	}

	/**
	 * Method 'MachinesDaoImpl'
	 * 
	 * @param userConn
	 */
	public MachinesDaoImpl(final java.sql.Connection userConn)
	{
		this.userConn = userConn;
	}

	/** 
	 * Sets the value of maxRows
	 */
	public void setMaxRows(int maxRows)
	{
		this.maxRows = maxRows;
	}

	/** 
	 * Gets the value of maxRows
	 */
	public int getMaxRows()
	{
		return maxRows;
	}

	/**
	 * Method 'getTableName'
	 * 
	 * @return String
	 */
	public String getTableName()
	{
		return "MACHINES";
	}

	/** 
	 * Fetches a single row from the result set
	 */
	protected Machines fetchSingleResult(ResultSet rs) throws SQLException
	{
		if (rs.next()) {
			Machines dto = new Machines();
			populateDto( dto, rs);
			return dto;
		} else {
			return null;
		}
		
	}

	/** 
	 * Fetches multiple rows from the result set
	 */
	protected Machines[] fetchMultiResults(ResultSet rs) throws SQLException
	{
		Collection resultList = new ArrayList();
		while (rs.next()) {
			Machines dto = new Machines();
			populateDto( dto, rs);
			resultList.add( dto );
		}
		
		Machines ret[] = new Machines[ resultList.size() ];
		resultList.toArray( ret );
		return ret;
	}

	/** 
	 * Populates a DTO with data from a ResultSet
	 */
	protected void populateDto(Machines dto, ResultSet rs) throws SQLException
	{
		dto.setMachineId( rs.getLong( COLUMN_MACHINE_ID ) );
		dto.setCustomerId( rs.getLong( COLUMN_CUSTOMER_ID ) );
		dto.setViveId( rs.getString( COLUMN_VIVE_ID ) );
		dto.setCpuSerialNo( rs.getString( COLUMN_CPU_SERIAL_NO ) );
		dto.setKeyData( rs.getString( COLUMN_KEY_DATA ) );
		dto.setKeyTimestamp( rs.getLong( COLUMN_KEY_TIMESTAMP ) );
		dto.setStolenFlag( rs.getInt( COLUMN_STOLEN_FLAG ) );
		if (rs.wasNull()) {
			dto.setStolenFlagNull( true );
		}
		
		dto.setTerminateFlag( rs.getInt( COLUMN_TERMINATE_FLAG ) );
		if (rs.wasNull()) {
			dto.setTerminateFlagNull( true );
		}
		
		dto.setRegisteredFlag( rs.getInt( COLUMN_REGISTERED_FLAG ) );
		if (rs.wasNull()) {
			dto.setRegisteredFlagNull( true );
		}
		
	}

	/** 
	 * Returns all rows from the MACHINES table that match the specified arbitrary SQL statement
	 */
	public Machines[] findByDynamicSelect(String sql, Object[] sqlParams) throws MachinesDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = sql;
		
		
			if (logger.isDebugEnabled()) {
				logger.debug( "Executing " + SQL);
			}
		
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			logger.error( "Exception: " + _e.getMessage(), _e );
			throw new MachinesDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

	/** 
	 * Returns all rows from the MACHINES table that match the specified arbitrary SQL statement
	 */
	public Machines[] findByDynamicWhere(String sql, Object[] sqlParams) throws MachinesDaoException
	{
		// declare variables
		final boolean isConnSupplied = (userConn != null);
		Connection conn = null;
		PreparedStatement stmt = null;
		ResultSet rs = null;
		
		try {
			// get the user-specified connection or get a connection from the ResourceManager
			conn = isConnSupplied ? userConn : ResourceManager.getConnection();
		
			// construct the SQL statement
			final String SQL = SQL_SELECT + " WHERE " + sql;
		
		
			if (logger.isDebugEnabled()) {
				logger.debug( "Executing " + SQL);
			}
		
			// prepare statement
			stmt = conn.prepareStatement( SQL );
			stmt.setMaxRows( maxRows );
		
			// bind parameters
			for (int i=0; sqlParams!=null && i<sqlParams.length; i++ ) {
				stmt.setObject( i+1, sqlParams[i] );
			}
		
		
			rs = stmt.executeQuery();
		
			// fetch the results
			return fetchMultiResults(rs);
		}
		catch (Exception _e) {
			logger.error( "Exception: " + _e.getMessage(), _e );
			throw new MachinesDaoException( "Exception: " + _e.getMessage(), _e );
		}
		finally {
			ResourceManager.close(rs);
			ResourceManager.close(stmt);
			if (!isConnSupplied) {
				ResourceManager.close(conn);
			}
		
		}
		
	}

}
